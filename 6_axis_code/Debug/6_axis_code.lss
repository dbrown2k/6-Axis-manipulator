
6_axis_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800200  000012f2  00001386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800428  00800428  000015ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017bd  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e18  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b04  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  0000475c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009181  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c5d  00000000  00000000  0000da6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003591  00000000  00000000  0000e792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 32       	cpi	r26, 0x28	; 40
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a8 e2       	ldi	r26, 0x28	; 40
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 37       	cpi	r26, 0x71	; 113
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	18 d6       	rcall	.+3120   	; 0xd50 <main>
     120:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z13read_switchesv>:

//cos lookup
float c(float deg)
{
	return cos_table[abs(deg*10)];
}
     126:	33 99       	sbic	0x06, 3	; 6
     128:	06 c0       	rjmp	.+12     	; 0x136 <_Z13read_switchesv+0x10>
     12a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     12e:	81 60       	ori	r24, 0x01	; 1
     130:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     134:	05 c0       	rjmp	.+10     	; 0x140 <_Z13read_switchesv+0x1a>
     136:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     13a:	8e 7f       	andi	r24, 0xFE	; 254
     13c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     140:	32 99       	sbic	0x06, 2	; 6
     142:	06 c0       	rjmp	.+12     	; 0x150 <_Z13read_switchesv+0x2a>
     144:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     148:	82 60       	ori	r24, 0x02	; 2
     14a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     14e:	05 c0       	rjmp	.+10     	; 0x15a <_Z13read_switchesv+0x34>
     150:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     154:	8d 7f       	andi	r24, 0xFD	; 253
     156:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     15a:	31 99       	sbic	0x06, 1	; 6
     15c:	06 c0       	rjmp	.+12     	; 0x16a <_Z13read_switchesv+0x44>
     15e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     162:	84 60       	ori	r24, 0x04	; 4
     164:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     168:	05 c0       	rjmp	.+10     	; 0x174 <_Z13read_switchesv+0x4e>
     16a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     16e:	8b 7f       	andi	r24, 0xFB	; 251
     170:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     174:	30 99       	sbic	0x06, 0	; 6
     176:	06 c0       	rjmp	.+12     	; 0x184 <_Z13read_switchesv+0x5e>
     178:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     17c:	88 60       	ori	r24, 0x08	; 8
     17e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     182:	05 c0       	rjmp	.+10     	; 0x18e <_Z13read_switchesv+0x68>
     184:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     188:	87 7f       	andi	r24, 0xF7	; 247
     18a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     18e:	35 99       	sbic	0x06, 5	; 6
     190:	06 c0       	rjmp	.+12     	; 0x19e <_Z13read_switchesv+0x78>
     192:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     196:	80 61       	ori	r24, 0x10	; 16
     198:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <_Z13read_switchesv+0x82>
     19e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     1a2:	8f 7e       	andi	r24, 0xEF	; 239
     1a4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     1a8:	34 99       	sbic	0x06, 4	; 6
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <_Z13read_switchesv+0x92>
     1ac:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     1b0:	80 62       	ori	r24, 0x20	; 32
     1b2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     1b6:	08 95       	ret
     1b8:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     1bc:	8f 7d       	andi	r24, 0xDF	; 223
     1be:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <end_stops>
     1c2:	08 95       	ret

000001c4 <_Z1sf>:

//sin lookup
float s(float deg)
{
     1c4:	8f 92       	push	r8
     1c6:	9f 92       	push	r9
     1c8:	af 92       	push	r10
     1ca:	bf 92       	push	r11
     1cc:	cf 92       	push	r12
     1ce:	df 92       	push	r13
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	6b 01       	movw	r12, r22
     1d6:	7c 01       	movw	r14, r24
	float abs_sin = sin_table[abs(deg*10)];
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e2       	ldi	r20, 0x20	; 32
     1de:	51 e4       	ldi	r21, 0x41	; 65
     1e0:	cc d7       	rcall	.+3992   	; 0x117a <__mulsf3>
     1e2:	e4 d6       	rcall	.+3528   	; 0xfac <__fixsfsi>
     1e4:	9b 01       	movw	r18, r22
     1e6:	77 23       	and	r23, r23
     1e8:	24 f4       	brge	.+8      	; 0x1f2 <_Z1sf+0x2e>
     1ea:	22 27       	eor	r18, r18
     1ec:	33 27       	eor	r19, r19
     1ee:	26 1b       	sub	r18, r22
     1f0:	37 0b       	sbc	r19, r23
     1f2:	c9 01       	movw	r24, r18
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	fc 01       	movw	r30, r24
     1fe:	e4 53       	subi	r30, 0x34	; 52
     200:	fd 4f       	sbci	r31, 0xFD	; 253
     202:	80 80       	ld	r8, Z
     204:	91 80       	ldd	r9, Z+1	; 0x01
     206:	a2 80       	ldd	r10, Z+2	; 0x02
     208:	b3 80       	ldd	r11, Z+3	; 0x03
	
	if (deg < 0) //check for negative
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	c7 01       	movw	r24, r14
     212:	b6 01       	movw	r22, r12
     214:	c7 d6       	rcall	.+3470   	; 0xfa4 <__cmpsf2>
     216:	88 23       	and	r24, r24
     218:	44 f4       	brge	.+16     	; 0x22a <_Z1sf+0x66>
	{
		abs_sin = 0 - abs_sin;
     21a:	a5 01       	movw	r20, r10
     21c:	94 01       	movw	r18, r8
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	cb 01       	movw	r24, r22
     224:	5a d6       	rcall	.+3252   	; 0xeda <__subsf3>
     226:	4b 01       	movw	r8, r22
     228:	5c 01       	movw	r10, r24
	}
	
	return abs_sin;
}
     22a:	c5 01       	movw	r24, r10
     22c:	b4 01       	movw	r22, r8
     22e:	ff 90       	pop	r15
     230:	ef 90       	pop	r14
     232:	df 90       	pop	r13
     234:	cf 90       	pop	r12
     236:	bf 90       	pop	r11
     238:	af 90       	pop	r10
     23a:	9f 90       	pop	r9
     23c:	8f 90       	pop	r8
     23e:	08 95       	ret

00000240 <_Z9calc_legsv>:
}


//calculate leg 
uint8_t calc_legs()
{
     240:	2f 92       	push	r2
     242:	3f 92       	push	r3
     244:	4f 92       	push	r4
     246:	5f 92       	push	r5
     248:	6f 92       	push	r6
     24a:	7f 92       	push	r7
     24c:	8f 92       	push	r8
     24e:	9f 92       	push	r9
     250:	af 92       	push	r10
     252:	bf 92       	push	r11
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	c2 5a       	subi	r28, 0xA2	; 162
     26a:	d1 09       	sbc	r29, r1
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
	const uint8_t RZ = 5;
	
	
	//translation array
	float t[3] = {
		new_offset[X] + offset[X],
     276:	00 e4       	ldi	r16, 0x40	; 64
     278:	14 e0       	ldi	r17, 0x04	; 4
     27a:	d8 01       	movw	r26, r16
     27c:	6d 91       	ld	r22, X+
     27e:	7d 91       	ld	r23, X+
     280:	8d 91       	ld	r24, X+
     282:	9c 91       	ld	r25, X
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	a9 01       	movw	r20, r18
     28a:	28 d6       	rcall	.+3152   	; 0xedc <__addsf3>
     28c:	cb 56       	subi	r28, 0x6B	; 107
     28e:	df 4f       	sbci	r29, 0xFF	; 255
     290:	68 83       	st	Y, r22
     292:	79 83       	std	Y+1, r23	; 0x01
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	9b 83       	std	Y+3, r25	; 0x03
     298:	c5 59       	subi	r28, 0x95	; 149
     29a:	d0 40       	sbci	r29, 0x00	; 0
		new_offset[Y]  + offset[Y],
     29c:	f8 01       	movw	r30, r16
     29e:	64 81       	ldd	r22, Z+4	; 0x04
     2a0:	75 81       	ldd	r23, Z+5	; 0x05
     2a2:	86 81       	ldd	r24, Z+6	; 0x06
     2a4:	97 81       	ldd	r25, Z+7	; 0x07
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	a9 01       	movw	r20, r18
     2ac:	17 d6       	rcall	.+3118   	; 0xedc <__addsf3>
     2ae:	c7 56       	subi	r28, 0x67	; 103
     2b0:	df 4f       	sbci	r29, 0xFF	; 255
     2b2:	68 83       	st	Y, r22
     2b4:	79 83       	std	Y+1, r23	; 0x01
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	9b 83       	std	Y+3, r25	; 0x03
     2ba:	c9 59       	subi	r28, 0x99	; 153
     2bc:	d0 40       	sbci	r29, 0x00	; 0
		new_offset[Z]  + z_mid + offset[Z]
     2be:	d8 01       	movw	r26, r16
     2c0:	18 96       	adiw	r26, 0x08	; 8
     2c2:	6d 91       	ld	r22, X+
     2c4:	7d 91       	ld	r23, X+
     2c6:	8d 91       	ld	r24, X+
     2c8:	9c 91       	ld	r25, X
     2ca:	1b 97       	sbiw	r26, 0x0b	; 11
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 ea       	ldi	r20, 0xA0	; 160
     2d2:	51 e4       	ldi	r21, 0x41	; 65
     2d4:	03 d6       	rcall	.+3078   	; 0xedc <__addsf3>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	ff d5       	rcall	.+3070   	; 0xedc <__addsf3>
     2de:	c3 56       	subi	r28, 0x63	; 99
     2e0:	df 4f       	sbci	r29, 0xFF	; 255
     2e2:	68 83       	st	Y, r22
     2e4:	79 83       	std	Y+1, r23	; 0x01
     2e6:	8a 83       	std	Y+2, r24	; 0x02
     2e8:	9b 83       	std	Y+3, r25	; 0x03
     2ea:	cd 59       	subi	r28, 0x9D	; 157
     2ec:	d0 40       	sbci	r29, 0x00	; 0
	};
	
	//calculate rotation sin/cosin values
	float s_roll = s(new_offset[RX]);
     2ee:	f8 01       	movw	r30, r16
     2f0:	64 85       	ldd	r22, Z+12	; 0x0c
     2f2:	75 85       	ldd	r23, Z+13	; 0x0d
     2f4:	86 85       	ldd	r24, Z+14	; 0x0e
     2f6:	97 85       	ldd	r25, Z+15	; 0x0f
     2f8:	65 df       	rcall	.-310    	; 0x1c4 <_Z1sf>
     2fa:	a5 96       	adiw	r28, 0x25	; 37
     2fc:	6c af       	std	Y+60, r22	; 0x3c
     2fe:	7d af       	std	Y+61, r23	; 0x3d
     300:	8e af       	std	Y+62, r24	; 0x3e
     302:	9f af       	std	Y+63, r25	; 0x3f
     304:	a5 97       	sbiw	r28, 0x25	; 37
	float s_pitch = s(new_offset[RY]);
     306:	d8 01       	movw	r26, r16
     308:	50 96       	adiw	r26, 0x10	; 16
     30a:	6d 91       	ld	r22, X+
     30c:	7d 91       	ld	r23, X+
     30e:	8d 91       	ld	r24, X+
     310:	9c 91       	ld	r25, X
     312:	53 97       	sbiw	r26, 0x13	; 19
     314:	57 df       	rcall	.-338    	; 0x1c4 <_Z1sf>
     316:	e5 96       	adiw	r28, 0x35	; 53
     318:	6c af       	std	Y+60, r22	; 0x3c
     31a:	7d af       	std	Y+61, r23	; 0x3d
     31c:	8e af       	std	Y+62, r24	; 0x3e
     31e:	9f af       	std	Y+63, r25	; 0x3f
	float s_yaw = s(new_offset[RZ]);
     320:	e5 97       	sbiw	r28, 0x35	; 53
     322:	f8 01       	movw	r30, r16
     324:	64 89       	ldd	r22, Z+20	; 0x14
     326:	75 89       	ldd	r23, Z+21	; 0x15
     328:	86 89       	ldd	r24, Z+22	; 0x16
     32a:	97 89       	ldd	r25, Z+23	; 0x17
     32c:	4b df       	rcall	.-362    	; 0x1c4 <_Z1sf>
     32e:	a9 96       	adiw	r28, 0x29	; 41
     330:	6c af       	std	Y+60, r22	; 0x3c
     332:	7d af       	std	Y+61, r23	; 0x3d
     334:	8e af       	std	Y+62, r24	; 0x3e
     336:	9f af       	std	Y+63, r25	; 0x3f
     338:	a9 97       	sbiw	r28, 0x29	; 41
	float c_roll = c(new_offset[RX]);
     33a:	d8 01       	movw	r26, r16
     33c:	1c 96       	adiw	r26, 0x0c	; 12
     33e:	6d 91       	ld	r22, X+
     340:	7d 91       	ld	r23, X+
     342:	8d 91       	ld	r24, X+
}

//cos lookup
float c(float deg)
{
	return cos_table[abs(deg*10)];
     344:	9c 91       	ld	r25, X
     346:	1f 97       	sbiw	r26, 0x0f	; 15
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e2       	ldi	r20, 0x20	; 32
     34e:	51 e4       	ldi	r21, 0x41	; 65
     350:	14 d7       	rcall	.+3624   	; 0x117a <__mulsf3>
     352:	2c d6       	rcall	.+3160   	; 0xfac <__fixsfsi>
     354:	9b 01       	movw	r18, r22
     356:	77 23       	and	r23, r23
     358:	24 f4       	brge	.+8      	; 0x362 <_Z9calc_legsv+0x122>
     35a:	22 27       	eor	r18, r18
     35c:	33 27       	eor	r19, r19
     35e:	26 1b       	sub	r18, r22
     360:	37 0b       	sbc	r19, r23
     362:	c9 01       	movw	r24, r18
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	fc 01       	movw	r30, r24
     36e:	e0 50       	subi	r30, 0x00	; 0
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	40 80       	ld	r4, Z
     374:	51 80       	ldd	r5, Z+1	; 0x01
     376:	62 80       	ldd	r6, Z+2	; 0x02
     378:	73 80       	ldd	r7, Z+3	; 0x03
	//calculate rotation sin/cosin values
	float s_roll = s(new_offset[RX]);
	float s_pitch = s(new_offset[RY]);
	float s_yaw = s(new_offset[RZ]);
	float c_roll = c(new_offset[RX]);
	float c_pitch = c(new_offset[RY]);
     37a:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <new_offset+0x10>
     37e:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <new_offset+0x11>
     382:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <new_offset+0x12>
}

//cos lookup
float c(float deg)
{
	return cos_table[abs(deg*10)];
     386:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <new_offset+0x13>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e2       	ldi	r20, 0x20	; 32
     390:	51 e4       	ldi	r21, 0x41	; 65
     392:	f3 d6       	rcall	.+3558   	; 0x117a <__mulsf3>
     394:	0b d6       	rcall	.+3094   	; 0xfac <__fixsfsi>
     396:	9b 01       	movw	r18, r22
     398:	77 23       	and	r23, r23
     39a:	24 f4       	brge	.+8      	; 0x3a4 <_Z9calc_legsv+0x164>
     39c:	22 27       	eor	r18, r18
     39e:	33 27       	eor	r19, r19
     3a0:	26 1b       	sub	r18, r22
     3a2:	37 0b       	sbc	r19, r23
     3a4:	c9 01       	movw	r24, r18
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	fc 01       	movw	r30, r24
     3b0:	e0 50       	subi	r30, 0x00	; 0
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	80 80       	ld	r8, Z
     3b6:	91 80       	ldd	r9, Z+1	; 0x01
     3b8:	a2 80       	ldd	r10, Z+2	; 0x02
     3ba:	b3 80       	ldd	r11, Z+3	; 0x03
	float s_roll = s(new_offset[RX]);
	float s_pitch = s(new_offset[RY]);
	float s_yaw = s(new_offset[RZ]);
	float c_roll = c(new_offset[RX]);
	float c_pitch = c(new_offset[RY]);
	float c_yaw = c(new_offset[RZ]);
     3bc:	60 91 54 04 	lds	r22, 0x0454	; 0x800454 <new_offset+0x14>
     3c0:	70 91 55 04 	lds	r23, 0x0455	; 0x800455 <new_offset+0x15>
     3c4:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <new_offset+0x16>
}

//cos lookup
float c(float deg)
{
	return cos_table[abs(deg*10)];
     3c8:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <new_offset+0x17>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 e2       	ldi	r20, 0x20	; 32
     3d2:	51 e4       	ldi	r21, 0x41	; 65
     3d4:	d2 d6       	rcall	.+3492   	; 0x117a <__mulsf3>
     3d6:	ea d5       	rcall	.+3028   	; 0xfac <__fixsfsi>
     3d8:	9b 01       	movw	r18, r22
     3da:	77 23       	and	r23, r23
     3dc:	24 f4       	brge	.+8      	; 0x3e6 <_Z9calc_legsv+0x1a6>
     3de:	22 27       	eor	r18, r18
     3e0:	33 27       	eor	r19, r19
     3e2:	26 1b       	sub	r18, r22
     3e4:	37 0b       	sbc	r19, r23
     3e6:	c9 01       	movw	r24, r18
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	fc 01       	movw	r30, r24
     3f2:	e0 50       	subi	r30, 0x00	; 0
     3f4:	fe 4f       	sbci	r31, 0xFE	; 254
     3f6:	c0 80       	ld	r12, Z
     3f8:	d1 80       	ldd	r13, Z+1	; 0x01
     3fa:	e2 80       	ldd	r14, Z+2	; 0x02
		p[1] = platform[leg][Y] - offset[Y];
		p[2] = platform[leg][Z] - offset[Z];
		
		
		//calculate leg vector
		leg_vector[leg][0] = (t[X] + c_yaw * c_pitch * p[X]) + ((-s_yaw * c_roll + c_yaw * s_pitch * s_roll) * p[Y]) + ((s_yaw * s_roll + c_yaw * s_pitch * c_roll) * p[Z]) - base[leg][X];
     3fc:	f3 80       	ldd	r15, Z+3	; 0x03
     3fe:	a5 01       	movw	r20, r10
     400:	94 01       	movw	r18, r8
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	b9 d6       	rcall	.+3442   	; 0x117a <__mulsf3>
     408:	e9 96       	adiw	r28, 0x39	; 57
     40a:	6c af       	std	Y+60, r22	; 0x3c
     40c:	7d af       	std	Y+61, r23	; 0x3d
     40e:	8e af       	std	Y+62, r24	; 0x3e
     410:	9f af       	std	Y+63, r25	; 0x3f
     412:	e9 97       	sbiw	r28, 0x39	; 57
     414:	a7 01       	movw	r20, r14
     416:	96 01       	movw	r18, r12
     418:	e5 96       	adiw	r28, 0x35	; 53
     41a:	6c ad       	ldd	r22, Y+60	; 0x3c
     41c:	7d ad       	ldd	r23, Y+61	; 0x3d
     41e:	8e ad       	ldd	r24, Y+62	; 0x3e
     420:	9f ad       	ldd	r25, Y+63	; 0x3f
     422:	e5 97       	sbiw	r28, 0x35	; 53
     424:	aa d6       	rcall	.+3412   	; 0x117a <__mulsf3>
     426:	ad 96       	adiw	r28, 0x2d	; 45
     428:	6c af       	std	Y+60, r22	; 0x3c
     42a:	7d af       	std	Y+61, r23	; 0x3d
     42c:	8e af       	std	Y+62, r24	; 0x3e
     42e:	9f af       	std	Y+63, r25	; 0x3f
     430:	ad 97       	sbiw	r28, 0x2d	; 45
     432:	a9 96       	adiw	r28, 0x29	; 41
     434:	6c ad       	ldd	r22, Y+60	; 0x3c
     436:	7d ad       	ldd	r23, Y+61	; 0x3d
     438:	8e ad       	ldd	r24, Y+62	; 0x3e
     43a:	9f ad       	ldd	r25, Y+63	; 0x3f
     43c:	a9 97       	sbiw	r28, 0x29	; 41
     43e:	90 58       	subi	r25, 0x80	; 128
     440:	a3 01       	movw	r20, r6
     442:	92 01       	movw	r18, r4
     444:	9a d6       	rcall	.+3380   	; 0x117a <__mulsf3>
     446:	e1 96       	adiw	r28, 0x31	; 49
     448:	6c af       	std	Y+60, r22	; 0x3c
     44a:	7d af       	std	Y+61, r23	; 0x3d
     44c:	8e af       	std	Y+62, r24	; 0x3e
     44e:	9f af       	std	Y+63, r25	; 0x3f
     450:	e1 97       	sbiw	r28, 0x31	; 49
     452:	ad 96       	adiw	r28, 0x2d	; 45
     454:	2c ad       	ldd	r18, Y+60	; 0x3c
     456:	3d ad       	ldd	r19, Y+61	; 0x3d
     458:	4e ad       	ldd	r20, Y+62	; 0x3e
     45a:	5f ad       	ldd	r21, Y+63	; 0x3f
     45c:	ad 97       	sbiw	r28, 0x2d	; 45
     45e:	a5 96       	adiw	r28, 0x25	; 37
     460:	6c ad       	ldd	r22, Y+60	; 0x3c
     462:	7d ad       	ldd	r23, Y+61	; 0x3d
     464:	8e ad       	ldd	r24, Y+62	; 0x3e
     466:	9f ad       	ldd	r25, Y+63	; 0x3f
     468:	a5 97       	sbiw	r28, 0x25	; 37
     46a:	87 d6       	rcall	.+3342   	; 0x117a <__mulsf3>
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	e1 96       	adiw	r28, 0x31	; 49
     472:	6c ad       	ldd	r22, Y+60	; 0x3c
     474:	7d ad       	ldd	r23, Y+61	; 0x3d
     476:	8e ad       	ldd	r24, Y+62	; 0x3e
     478:	9f ad       	ldd	r25, Y+63	; 0x3f
     47a:	e1 97       	sbiw	r28, 0x31	; 49
     47c:	2f d5       	rcall	.+2654   	; 0xedc <__addsf3>
     47e:	ed 96       	adiw	r28, 0x3d	; 61
     480:	6c af       	std	Y+60, r22	; 0x3c
     482:	7d af       	std	Y+61, r23	; 0x3d
     484:	8e af       	std	Y+62, r24	; 0x3e
     486:	9f af       	std	Y+63, r25	; 0x3f
     488:	ed 97       	sbiw	r28, 0x3d	; 61
     48a:	a9 96       	adiw	r28, 0x29	; 41
     48c:	2c ad       	ldd	r18, Y+60	; 0x3c
     48e:	3d ad       	ldd	r19, Y+61	; 0x3d
     490:	4e ad       	ldd	r20, Y+62	; 0x3e
     492:	5f ad       	ldd	r21, Y+63	; 0x3f
     494:	a9 97       	sbiw	r28, 0x29	; 41
     496:	a5 96       	adiw	r28, 0x25	; 37
     498:	6c ad       	ldd	r22, Y+60	; 0x3c
     49a:	7d ad       	ldd	r23, Y+61	; 0x3d
     49c:	8e ad       	ldd	r24, Y+62	; 0x3e
     49e:	9f ad       	ldd	r25, Y+63	; 0x3f
     4a0:	a5 97       	sbiw	r28, 0x25	; 37
     4a2:	6b d6       	rcall	.+3286   	; 0x117a <__mulsf3>
     4a4:	e1 96       	adiw	r28, 0x31	; 49
     4a6:	6c af       	std	Y+60, r22	; 0x3c
     4a8:	7d af       	std	Y+61, r23	; 0x3d
     4aa:	8e af       	std	Y+62, r24	; 0x3e
     4ac:	9f af       	std	Y+63, r25	; 0x3f
     4ae:	e1 97       	sbiw	r28, 0x31	; 49
     4b0:	a3 01       	movw	r20, r6
     4b2:	92 01       	movw	r18, r4
     4b4:	ad 96       	adiw	r28, 0x2d	; 45
     4b6:	6c ad       	ldd	r22, Y+60	; 0x3c
     4b8:	7d ad       	ldd	r23, Y+61	; 0x3d
     4ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     4bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     4be:	ad 97       	sbiw	r28, 0x2d	; 45
     4c0:	5c d6       	rcall	.+3256   	; 0x117a <__mulsf3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	e1 96       	adiw	r28, 0x31	; 49
     4c8:	6c ad       	ldd	r22, Y+60	; 0x3c
     4ca:	7d ad       	ldd	r23, Y+61	; 0x3d
     4cc:	8e ad       	ldd	r24, Y+62	; 0x3e
     4ce:	9f ad       	ldd	r25, Y+63	; 0x3f
     4d0:	e1 97       	sbiw	r28, 0x31	; 49
     4d2:	04 d5       	rcall	.+2568   	; 0xedc <__addsf3>
     4d4:	c3 58       	subi	r28, 0x83	; 131
     4d6:	df 4f       	sbci	r29, 0xFF	; 255
     4d8:	68 83       	st	Y, r22
     4da:	79 83       	std	Y+1, r23	; 0x01
     4dc:	8a 83       	std	Y+2, r24	; 0x02
     4de:	9b 83       	std	Y+3, r25	; 0x03
     4e0:	cd 57       	subi	r28, 0x7D	; 125
		leg_vector[leg][1] = (t[Y] + s_yaw * c_pitch * p[X]) + ((c_yaw * c_roll + s_yaw * s_pitch * s_roll) * p[Y]) + ((-c_yaw *s_roll + s_yaw * s_pitch * c_roll) * p[Z]) - base[leg][Y];
     4e2:	d0 40       	sbci	r29, 0x00	; 0
     4e4:	a5 01       	movw	r20, r10
     4e6:	94 01       	movw	r18, r8
     4e8:	a9 96       	adiw	r28, 0x29	; 41
     4ea:	6c ad       	ldd	r22, Y+60	; 0x3c
     4ec:	7d ad       	ldd	r23, Y+61	; 0x3d
     4ee:	8e ad       	ldd	r24, Y+62	; 0x3e
     4f0:	9f ad       	ldd	r25, Y+63	; 0x3f
     4f2:	a9 97       	sbiw	r28, 0x29	; 41
     4f4:	42 d6       	rcall	.+3204   	; 0x117a <__mulsf3>
     4f6:	cf 57       	subi	r28, 0x7F	; 127
     4f8:	df 4f       	sbci	r29, 0xFF	; 255
     4fa:	68 83       	st	Y, r22
     4fc:	79 83       	std	Y+1, r23	; 0x01
     4fe:	8a 83       	std	Y+2, r24	; 0x02
     500:	9b 83       	std	Y+3, r25	; 0x03
     502:	c1 58       	subi	r28, 0x81	; 129
     504:	d0 40       	sbci	r29, 0x00	; 0
     506:	a9 96       	adiw	r28, 0x29	; 41
     508:	2c ad       	ldd	r18, Y+60	; 0x3c
     50a:	3d ad       	ldd	r19, Y+61	; 0x3d
     50c:	4e ad       	ldd	r20, Y+62	; 0x3e
     50e:	5f ad       	ldd	r21, Y+63	; 0x3f
     510:	a9 97       	sbiw	r28, 0x29	; 41
     512:	e5 96       	adiw	r28, 0x35	; 53
     514:	6c ad       	ldd	r22, Y+60	; 0x3c
     516:	7d ad       	ldd	r23, Y+61	; 0x3d
     518:	8e ad       	ldd	r24, Y+62	; 0x3e
     51a:	9f ad       	ldd	r25, Y+63	; 0x3f
     51c:	e5 97       	sbiw	r28, 0x35	; 53
     51e:	2d d6       	rcall	.+3162   	; 0x117a <__mulsf3>
     520:	a9 96       	adiw	r28, 0x29	; 41
     522:	6c af       	std	Y+60, r22	; 0x3c
     524:	7d af       	std	Y+61, r23	; 0x3d
     526:	8e af       	std	Y+62, r24	; 0x3e
     528:	9f af       	std	Y+63, r25	; 0x3f
     52a:	a9 97       	sbiw	r28, 0x29	; 41
     52c:	a3 01       	movw	r20, r6
     52e:	92 01       	movw	r18, r4
     530:	c7 01       	movw	r24, r14
     532:	b6 01       	movw	r22, r12
     534:	22 d6       	rcall	.+3140   	; 0x117a <__mulsf3>
     536:	ad 96       	adiw	r28, 0x2d	; 45
     538:	6c af       	std	Y+60, r22	; 0x3c
     53a:	7d af       	std	Y+61, r23	; 0x3d
     53c:	8e af       	std	Y+62, r24	; 0x3e
     53e:	9f af       	std	Y+63, r25	; 0x3f
     540:	ad 97       	sbiw	r28, 0x2d	; 45
     542:	a9 96       	adiw	r28, 0x29	; 41
     544:	2c ad       	ldd	r18, Y+60	; 0x3c
     546:	3d ad       	ldd	r19, Y+61	; 0x3d
     548:	4e ad       	ldd	r20, Y+62	; 0x3e
     54a:	5f ad       	ldd	r21, Y+63	; 0x3f
     54c:	a9 97       	sbiw	r28, 0x29	; 41
     54e:	a5 96       	adiw	r28, 0x25	; 37
     550:	6c ad       	ldd	r22, Y+60	; 0x3c
     552:	7d ad       	ldd	r23, Y+61	; 0x3d
     554:	8e ad       	ldd	r24, Y+62	; 0x3e
     556:	9f ad       	ldd	r25, Y+63	; 0x3f
     558:	a5 97       	sbiw	r28, 0x25	; 37
     55a:	0f d6       	rcall	.+3102   	; 0x117a <__mulsf3>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	ad 96       	adiw	r28, 0x2d	; 45
     562:	6c ad       	ldd	r22, Y+60	; 0x3c
     564:	7d ad       	ldd	r23, Y+61	; 0x3d
     566:	8e ad       	ldd	r24, Y+62	; 0x3e
     568:	9f ad       	ldd	r25, Y+63	; 0x3f
     56a:	ad 97       	sbiw	r28, 0x2d	; 45
     56c:	b7 d4       	rcall	.+2414   	; 0xedc <__addsf3>
     56e:	cb 57       	subi	r28, 0x7B	; 123
     570:	df 4f       	sbci	r29, 0xFF	; 255
     572:	68 83       	st	Y, r22
     574:	79 83       	std	Y+1, r23	; 0x01
     576:	8a 83       	std	Y+2, r24	; 0x02
     578:	9b 83       	std	Y+3, r25	; 0x03
     57a:	c5 58       	subi	r28, 0x85	; 133
     57c:	d0 40       	sbci	r29, 0x00	; 0
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	90 58       	subi	r25, 0x80	; 128
     584:	a5 96       	adiw	r28, 0x25	; 37
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	a5 97       	sbiw	r28, 0x25	; 37
     590:	f4 d5       	rcall	.+3048   	; 0x117a <__mulsf3>
     592:	6b 01       	movw	r12, r22
     594:	7c 01       	movw	r14, r24
     596:	a3 01       	movw	r20, r6
     598:	92 01       	movw	r18, r4
     59a:	a9 96       	adiw	r28, 0x29	; 41
     59c:	6c ad       	ldd	r22, Y+60	; 0x3c
     59e:	7d ad       	ldd	r23, Y+61	; 0x3d
     5a0:	8e ad       	ldd	r24, Y+62	; 0x3e
     5a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     5a4:	a9 97       	sbiw	r28, 0x29	; 41
     5a6:	e9 d5       	rcall	.+3026   	; 0x117a <__mulsf3>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c7 01       	movw	r24, r14
     5ae:	b6 01       	movw	r22, r12
     5b0:	95 d4       	rcall	.+2346   	; 0xedc <__addsf3>
     5b2:	c7 57       	subi	r28, 0x77	; 119
     5b4:	df 4f       	sbci	r29, 0xFF	; 255
     5b6:	68 83       	st	Y, r22
     5b8:	79 83       	std	Y+1, r23	; 0x01
     5ba:	8a 83       	std	Y+2, r24	; 0x02
     5bc:	9b 83       	std	Y+3, r25	; 0x03
		leg_vector[leg][2] = (t[Z] + -s_pitch * p[X]) + (c_pitch * s_roll * p[Y]) + (c_pitch * c_roll * p[Z]) - base[leg][Z];
     5be:	c9 58       	subi	r28, 0x89	; 137
     5c0:	d0 40       	sbci	r29, 0x00	; 0
     5c2:	a5 01       	movw	r20, r10
     5c4:	94 01       	movw	r18, r8
     5c6:	a5 96       	adiw	r28, 0x25	; 37
     5c8:	6c ad       	ldd	r22, Y+60	; 0x3c
     5ca:	7d ad       	ldd	r23, Y+61	; 0x3d
     5cc:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ce:	9f ad       	ldd	r25, Y+63	; 0x3f
     5d0:	a5 97       	sbiw	r28, 0x25	; 37
     5d2:	d3 d5       	rcall	.+2982   	; 0x117a <__mulsf3>
     5d4:	c3 57       	subi	r28, 0x73	; 115
     5d6:	df 4f       	sbci	r29, 0xFF	; 255
     5d8:	68 83       	st	Y, r22
     5da:	79 83       	std	Y+1, r23	; 0x01
     5dc:	8a 83       	std	Y+2, r24	; 0x02
     5de:	9b 83       	std	Y+3, r25	; 0x03
     5e0:	cd 58       	subi	r28, 0x8D	; 141
     5e2:	d0 40       	sbci	r29, 0x00	; 0
     5e4:	a3 01       	movw	r20, r6
     5e6:	92 01       	movw	r18, r4
     5e8:	c5 01       	movw	r24, r10
     5ea:	b4 01       	movw	r22, r8
     5ec:	c6 d5       	rcall	.+2956   	; 0x117a <__mulsf3>
     5ee:	cf 56       	subi	r28, 0x6F	; 111
     5f0:	df 4f       	sbci	r29, 0xFF	; 255
     5f2:	68 83       	st	Y, r22
     5f4:	79 83       	std	Y+1, r23	; 0x01
     5f6:	8a 83       	std	Y+2, r24	; 0x02
     5f8:	9b 83       	std	Y+3, r25	; 0x03
     5fa:	c1 59       	subi	r28, 0x91	; 145
     5fc:	d0 40       	sbci	r29, 0x00	; 0
     5fe:	08 e9       	ldi	r16, 0x98	; 152
     600:	13 e0       	ldi	r17, 0x03	; 3
     602:	e0 ee       	ldi	r30, 0xE0	; 224
     604:	f3 e0       	ldi	r31, 0x03	; 3
     606:	a7 96       	adiw	r28, 0x27	; 39
     608:	ff af       	std	Y+63, r31	; 0x3f
     60a:	ee af       	std	Y+62, r30	; 0x3e
     60c:	a7 97       	sbiw	r28, 0x27	; 39
     60e:	1e 01       	movw	r2, r28
     610:	f9 e1       	ldi	r31, 0x19	; 25
     612:	2f 0e       	add	r2, r31
     614:	31 1c       	adc	r3, r1
     616:	9e 01       	movw	r18, r28
     618:	2f 5f       	subi	r18, 0xFF	; 255
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	cf 55       	subi	r28, 0x5F	; 95
     61e:	df 4f       	sbci	r29, 0xFF	; 255
     620:	39 83       	std	Y+1, r19	; 0x01
     622:	28 83       	st	Y, r18
     624:	c1 5a       	subi	r28, 0xA1	; 161
     626:	d0 40       	sbci	r29, 0x00	; 0
     628:	af 96       	adiw	r28, 0x2f	; 47
     62a:	3f af       	std	Y+63, r19	; 0x3f
     62c:	2e af       	std	Y+62, r18	; 0x3e
     62e:	af 97       	sbiw	r28, 0x2f	; 47
     630:	e5 96       	adiw	r28, 0x35	; 53
     632:	8c ad       	ldd	r24, Y+60	; 0x3c
     634:	9d ad       	ldd	r25, Y+61	; 0x3d
     636:	ae ad       	ldd	r26, Y+62	; 0x3e
     638:	bf ad       	ldd	r27, Y+63	; 0x3f
     63a:	e5 97       	sbiw	r28, 0x35	; 53
     63c:	b0 58       	subi	r27, 0x80	; 128
     63e:	e5 96       	adiw	r28, 0x35	; 53
     640:	8c af       	std	Y+60, r24	; 0x3c
     642:	9d af       	std	Y+61, r25	; 0x3d
     644:	ae af       	std	Y+62, r26	; 0x3e
     646:	bf af       	std	Y+63, r27	; 0x3f
     648:	e5 97       	sbiw	r28, 0x35	; 53
	
	//iterate though the legs
	for (uint8_t leg = 0; leg <= 5; leg++)
	{
		//leg platform coordinates
		p[0] = platform[leg][X] - offset[X];
     64a:	d8 01       	movw	r26, r16
     64c:	cd 90       	ld	r12, X+
     64e:	dd 90       	ld	r13, X+
     650:	ed 90       	ld	r14, X+
     652:	fc 90       	ld	r15, X
		p[1] = platform[leg][Y] - offset[Y];
     654:	13 97       	sbiw	r26, 0x03	; 3
     656:	14 96       	adiw	r26, 0x04	; 4
     658:	4d 90       	ld	r4, X+
     65a:	5d 90       	ld	r5, X+
     65c:	6d 90       	ld	r6, X+
		p[2] = platform[leg][Z] - offset[Z];
     65e:	7c 90       	ld	r7, X
     660:	17 97       	sbiw	r26, 0x07	; 7
     662:	18 96       	adiw	r26, 0x08	; 8
     664:	8d 91       	ld	r24, X+
     666:	9d 91       	ld	r25, X+
     668:	0d 90       	ld	r0, X+
     66a:	bc 91       	ld	r27, X
     66c:	a0 2d       	mov	r26, r0
     66e:	ad 96       	adiw	r28, 0x2d	; 45
     670:	8c af       	std	Y+60, r24	; 0x3c
     672:	9d af       	std	Y+61, r25	; 0x3d
		
		
		//calculate leg vector
		leg_vector[leg][0] = (t[X] + c_yaw * c_pitch * p[X]) + ((-s_yaw * c_roll + c_yaw * s_pitch * s_roll) * p[Y]) + ((s_yaw * s_roll + c_yaw * s_pitch * c_roll) * p[Z]) - base[leg][X];
     674:	ae af       	std	Y+62, r26	; 0x3e
     676:	bf af       	std	Y+63, r27	; 0x3f
     678:	ad 97       	sbiw	r28, 0x2d	; 45
     67a:	e9 96       	adiw	r28, 0x39	; 57
     67c:	2c ad       	ldd	r18, Y+60	; 0x3c
     67e:	3d ad       	ldd	r19, Y+61	; 0x3d
     680:	4e ad       	ldd	r20, Y+62	; 0x3e
     682:	5f ad       	ldd	r21, Y+63	; 0x3f
     684:	e9 97       	sbiw	r28, 0x39	; 57
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	77 d5       	rcall	.+2798   	; 0x117a <__mulsf3>
     68c:	cb 56       	subi	r28, 0x6B	; 107
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	28 81       	ld	r18, Y
     692:	39 81       	ldd	r19, Y+1	; 0x01
     694:	4a 81       	ldd	r20, Y+2	; 0x02
     696:	5b 81       	ldd	r21, Y+3	; 0x03
     698:	c5 59       	subi	r28, 0x95	; 149
     69a:	d0 40       	sbci	r29, 0x00	; 0
     69c:	1f d4       	rcall	.+2110   	; 0xedc <__addsf3>
     69e:	4b 01       	movw	r8, r22
     6a0:	5c 01       	movw	r10, r24
     6a2:	ed 96       	adiw	r28, 0x3d	; 61
     6a4:	2c ad       	ldd	r18, Y+60	; 0x3c
     6a6:	3d ad       	ldd	r19, Y+61	; 0x3d
     6a8:	4e ad       	ldd	r20, Y+62	; 0x3e
     6aa:	5f ad       	ldd	r21, Y+63	; 0x3f
     6ac:	ed 97       	sbiw	r28, 0x3d	; 61
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	63 d5       	rcall	.+2758   	; 0x117a <__mulsf3>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	c5 01       	movw	r24, r10
     6ba:	b4 01       	movw	r22, r8
     6bc:	0f d4       	rcall	.+2078   	; 0xedc <__addsf3>
     6be:	4b 01       	movw	r8, r22
     6c0:	5c 01       	movw	r10, r24
     6c2:	c3 58       	subi	r28, 0x83	; 131
     6c4:	df 4f       	sbci	r29, 0xFF	; 255
     6c6:	28 81       	ld	r18, Y
     6c8:	39 81       	ldd	r19, Y+1	; 0x01
     6ca:	4a 81       	ldd	r20, Y+2	; 0x02
     6cc:	5b 81       	ldd	r21, Y+3	; 0x03
     6ce:	cd 57       	subi	r28, 0x7D	; 125
     6d0:	d0 40       	sbci	r29, 0x00	; 0
     6d2:	ad 96       	adiw	r28, 0x2d	; 45
     6d4:	6c ad       	ldd	r22, Y+60	; 0x3c
     6d6:	7d ad       	ldd	r23, Y+61	; 0x3d
     6d8:	8e ad       	ldd	r24, Y+62	; 0x3e
     6da:	9f ad       	ldd	r25, Y+63	; 0x3f
     6dc:	ad 97       	sbiw	r28, 0x2d	; 45
     6de:	4d d5       	rcall	.+2714   	; 0x117a <__mulsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	f9 d3       	rcall	.+2034   	; 0xedc <__addsf3>
     6ea:	a7 96       	adiw	r28, 0x27	; 39
     6ec:	ee ad       	ldd	r30, Y+62	; 0x3e
     6ee:	ff ad       	ldd	r31, Y+63	; 0x3f
     6f0:	a7 97       	sbiw	r28, 0x27	; 39
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	42 81       	ldd	r20, Z+2	; 0x02
     6f8:	53 81       	ldd	r21, Z+3	; 0x03
     6fa:	ef d3       	rcall	.+2014   	; 0xeda <__subsf3>
     6fc:	a5 96       	adiw	r28, 0x25	; 37
     6fe:	6c af       	std	Y+60, r22	; 0x3c
     700:	7d af       	std	Y+61, r23	; 0x3d
     702:	8e af       	std	Y+62, r24	; 0x3e
     704:	9f af       	std	Y+63, r25	; 0x3f
     706:	a5 97       	sbiw	r28, 0x25	; 37
     708:	d1 01       	movw	r26, r2
     70a:	6d 93       	st	X+, r22
		leg_vector[leg][1] = (t[Y] + s_yaw * c_pitch * p[X]) + ((c_yaw * c_roll + s_yaw * s_pitch * s_roll) * p[Y]) + ((-c_yaw *s_roll + s_yaw * s_pitch * c_roll) * p[Z]) - base[leg][Y];
     70c:	7d 93       	st	X+, r23
     70e:	8d 93       	st	X+, r24
     710:	9c 93       	st	X, r25
     712:	13 97       	sbiw	r26, 0x03	; 3
     714:	cf 57       	subi	r28, 0x7F	; 127
     716:	df 4f       	sbci	r29, 0xFF	; 255
     718:	28 81       	ld	r18, Y
     71a:	39 81       	ldd	r19, Y+1	; 0x01
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	c1 58       	subi	r28, 0x81	; 129
     722:	d0 40       	sbci	r29, 0x00	; 0
     724:	c7 01       	movw	r24, r14
     726:	b6 01       	movw	r22, r12
     728:	28 d5       	rcall	.+2640   	; 0x117a <__mulsf3>
     72a:	c7 56       	subi	r28, 0x67	; 103
     72c:	df 4f       	sbci	r29, 0xFF	; 255
     72e:	28 81       	ld	r18, Y
     730:	39 81       	ldd	r19, Y+1	; 0x01
     732:	4a 81       	ldd	r20, Y+2	; 0x02
     734:	5b 81       	ldd	r21, Y+3	; 0x03
     736:	c9 59       	subi	r28, 0x99	; 153
     738:	d0 40       	sbci	r29, 0x00	; 0
     73a:	d0 d3       	rcall	.+1952   	; 0xedc <__addsf3>
     73c:	4b 01       	movw	r8, r22
     73e:	5c 01       	movw	r10, r24
     740:	cb 57       	subi	r28, 0x7B	; 123
     742:	df 4f       	sbci	r29, 0xFF	; 255
     744:	28 81       	ld	r18, Y
     746:	39 81       	ldd	r19, Y+1	; 0x01
     748:	4a 81       	ldd	r20, Y+2	; 0x02
     74a:	5b 81       	ldd	r21, Y+3	; 0x03
     74c:	c5 58       	subi	r28, 0x85	; 133
     74e:	d0 40       	sbci	r29, 0x00	; 0
     750:	c3 01       	movw	r24, r6
     752:	b2 01       	movw	r22, r4
     754:	12 d5       	rcall	.+2596   	; 0x117a <__mulsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	c5 01       	movw	r24, r10
     75c:	b4 01       	movw	r22, r8
     75e:	be d3       	rcall	.+1916   	; 0xedc <__addsf3>
     760:	4b 01       	movw	r8, r22
     762:	5c 01       	movw	r10, r24
     764:	c7 57       	subi	r28, 0x77	; 119
     766:	df 4f       	sbci	r29, 0xFF	; 255
     768:	28 81       	ld	r18, Y
     76a:	39 81       	ldd	r19, Y+1	; 0x01
     76c:	4a 81       	ldd	r20, Y+2	; 0x02
     76e:	5b 81       	ldd	r21, Y+3	; 0x03
     770:	c9 58       	subi	r28, 0x89	; 137
     772:	d0 40       	sbci	r29, 0x00	; 0
     774:	ad 96       	adiw	r28, 0x2d	; 45
     776:	6c ad       	ldd	r22, Y+60	; 0x3c
     778:	7d ad       	ldd	r23, Y+61	; 0x3d
     77a:	8e ad       	ldd	r24, Y+62	; 0x3e
     77c:	9f ad       	ldd	r25, Y+63	; 0x3f
     77e:	ad 97       	sbiw	r28, 0x2d	; 45
     780:	fc d4       	rcall	.+2552   	; 0x117a <__mulsf3>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	c5 01       	movw	r24, r10
     788:	b4 01       	movw	r22, r8
     78a:	a8 d3       	rcall	.+1872   	; 0xedc <__addsf3>
     78c:	a7 96       	adiw	r28, 0x27	; 39
     78e:	ee ad       	ldd	r30, Y+62	; 0x3e
     790:	ff ad       	ldd	r31, Y+63	; 0x3f
     792:	a7 97       	sbiw	r28, 0x27	; 39
     794:	24 81       	ldd	r18, Z+4	; 0x04
     796:	35 81       	ldd	r19, Z+5	; 0x05
     798:	46 81       	ldd	r20, Z+6	; 0x06
     79a:	57 81       	ldd	r21, Z+7	; 0x07
     79c:	9e d3       	rcall	.+1852   	; 0xeda <__subsf3>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
     7a2:	d1 01       	movw	r26, r2
     7a4:	14 96       	adiw	r26, 0x04	; 4
     7a6:	6d 93       	st	X+, r22
		leg_vector[leg][2] = (t[Z] + -s_pitch * p[X]) + (c_pitch * s_roll * p[Y]) + (c_pitch * c_roll * p[Z]) - base[leg][Z];
     7a8:	7d 93       	st	X+, r23
     7aa:	8d 93       	st	X+, r24
     7ac:	9c 93       	st	X, r25
     7ae:	17 97       	sbiw	r26, 0x07	; 7
     7b0:	a7 01       	movw	r20, r14
     7b2:	96 01       	movw	r18, r12
     7b4:	e5 96       	adiw	r28, 0x35	; 53
     7b6:	6c ad       	ldd	r22, Y+60	; 0x3c
     7b8:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     7bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     7be:	e5 97       	sbiw	r28, 0x35	; 53
     7c0:	dc d4       	rcall	.+2488   	; 0x117a <__mulsf3>
     7c2:	c3 56       	subi	r28, 0x63	; 99
     7c4:	df 4f       	sbci	r29, 0xFF	; 255
     7c6:	28 81       	ld	r18, Y
     7c8:	39 81       	ldd	r19, Y+1	; 0x01
     7ca:	4a 81       	ldd	r20, Y+2	; 0x02
     7cc:	5b 81       	ldd	r21, Y+3	; 0x03
     7ce:	cd 59       	subi	r28, 0x9D	; 157
     7d0:	d0 40       	sbci	r29, 0x00	; 0
     7d2:	84 d3       	rcall	.+1800   	; 0xedc <__addsf3>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	c3 57       	subi	r28, 0x73	; 115
     7da:	df 4f       	sbci	r29, 0xFF	; 255
     7dc:	28 81       	ld	r18, Y
     7de:	39 81       	ldd	r19, Y+1	; 0x01
     7e0:	4a 81       	ldd	r20, Y+2	; 0x02
     7e2:	5b 81       	ldd	r21, Y+3	; 0x03
     7e4:	cd 58       	subi	r28, 0x8D	; 141
     7e6:	d0 40       	sbci	r29, 0x00	; 0
     7e8:	c3 01       	movw	r24, r6
     7ea:	b2 01       	movw	r22, r4
     7ec:	c6 d4       	rcall	.+2444   	; 0x117a <__mulsf3>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	72 d3       	rcall	.+1764   	; 0xedc <__addsf3>
     7f8:	6b 01       	movw	r12, r22
     7fa:	7c 01       	movw	r14, r24
     7fc:	cf 56       	subi	r28, 0x6F	; 111
     7fe:	df 4f       	sbci	r29, 0xFF	; 255
     800:	28 81       	ld	r18, Y
     802:	39 81       	ldd	r19, Y+1	; 0x01
     804:	4a 81       	ldd	r20, Y+2	; 0x02
     806:	5b 81       	ldd	r21, Y+3	; 0x03
     808:	c1 59       	subi	r28, 0x91	; 145
     80a:	d0 40       	sbci	r29, 0x00	; 0
     80c:	ad 96       	adiw	r28, 0x2d	; 45
     80e:	6c ad       	ldd	r22, Y+60	; 0x3c
     810:	7d ad       	ldd	r23, Y+61	; 0x3d
     812:	8e ad       	ldd	r24, Y+62	; 0x3e
     814:	9f ad       	ldd	r25, Y+63	; 0x3f
     816:	ad 97       	sbiw	r28, 0x2d	; 45
     818:	b0 d4       	rcall	.+2400   	; 0x117a <__mulsf3>
     81a:	9b 01       	movw	r18, r22
     81c:	ac 01       	movw	r20, r24
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	5c d3       	rcall	.+1720   	; 0xedc <__addsf3>
     824:	a7 96       	adiw	r28, 0x27	; 39
     826:	ee ad       	ldd	r30, Y+62	; 0x3e
     828:	ff ad       	ldd	r31, Y+63	; 0x3f
     82a:	a7 97       	sbiw	r28, 0x27	; 39
     82c:	20 85       	ldd	r18, Z+8	; 0x08
     82e:	31 85       	ldd	r19, Z+9	; 0x09
     830:	42 85       	ldd	r20, Z+10	; 0x0a
     832:	53 85       	ldd	r21, Z+11	; 0x0b
     834:	52 d3       	rcall	.+1700   	; 0xeda <__subsf3>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24

		
		//calculate leg length
		leg_change[leg] = sqrtf(leg_vector[leg][X]*leg_vector[leg][X] + leg_vector[leg][Y]*leg_vector[leg][Y] + leg_vector[leg][Z]*leg_vector[leg][Z]) - leg_mid;
     83a:	d1 01       	movw	r26, r2
     83c:	18 96       	adiw	r26, 0x08	; 8
     83e:	6d 93       	st	X+, r22
     840:	7d 93       	st	X+, r23
     842:	8d 93       	st	X+, r24
     844:	9c 93       	st	X, r25
     846:	1b 97       	sbiw	r26, 0x0b	; 11
     848:	a5 96       	adiw	r28, 0x25	; 37
     84a:	2c ad       	ldd	r18, Y+60	; 0x3c
     84c:	3d ad       	ldd	r19, Y+61	; 0x3d
     84e:	4e ad       	ldd	r20, Y+62	; 0x3e
     850:	5f ad       	ldd	r21, Y+63	; 0x3f
     852:	a5 97       	sbiw	r28, 0x25	; 37
     854:	ca 01       	movw	r24, r20
     856:	b9 01       	movw	r22, r18
     858:	90 d4       	rcall	.+2336   	; 0x117a <__mulsf3>
     85a:	2b 01       	movw	r4, r22
     85c:	3c 01       	movw	r6, r24
     85e:	a5 01       	movw	r20, r10
     860:	94 01       	movw	r18, r8
     862:	c5 01       	movw	r24, r10
     864:	b4 01       	movw	r22, r8
     866:	89 d4       	rcall	.+2322   	; 0x117a <__mulsf3>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	c3 01       	movw	r24, r6
     86e:	b2 01       	movw	r22, r4
     870:	35 d3       	rcall	.+1642   	; 0xedc <__addsf3>
     872:	4b 01       	movw	r8, r22
     874:	5c 01       	movw	r10, r24
     876:	a7 01       	movw	r20, r14
     878:	96 01       	movw	r18, r12
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	7d d4       	rcall	.+2298   	; 0x117a <__mulsf3>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	29 d3       	rcall	.+1618   	; 0xedc <__addsf3>
     88a:	de d4       	rcall	.+2492   	; 0x1248 <sqrt>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 ef       	ldi	r20, 0xF0	; 240
     892:	51 e4       	ldi	r21, 0x41	; 65
     894:	22 d3       	rcall	.+1604   	; 0xeda <__subsf3>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	af 96       	adiw	r28, 0x2f	; 47
     89c:	ee ad       	ldd	r30, Y+62	; 0x3e
     89e:	ff ad       	ldd	r31, Y+63	; 0x3f
     8a0:	af 97       	sbiw	r28, 0x2f	; 47
     8a2:	61 93       	st	Z+, r22
     8a4:	71 93       	st	Z+, r23
     8a6:	81 93       	st	Z+, r24
     8a8:	91 93       	st	Z+, r25
     8aa:	af 96       	adiw	r28, 0x2f	; 47
     8ac:	ff af       	std	Y+63, r31	; 0x3f
		
		//check if out of range (leg length)
		if (leg_change[leg] <= -leg_range || leg_change[leg] >= leg_range)
     8ae:	ee af       	std	Y+62, r30	; 0x3e
     8b0:	af 97       	sbiw	r28, 0x2f	; 47
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 ec       	ldi	r21, 0xC0	; 192
     8ba:	74 d3       	rcall	.+1768   	; 0xfa4 <__cmpsf2>
     8bc:	18 16       	cp	r1, r24
     8be:	0c f0       	brlt	.+2      	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
     8c0:	50 c0       	rjmp	.+160    	; 0x962 <__LOCK_REGION_LENGTH__+0x562>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e4       	ldi	r21, 0x40	; 64
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	51 d4       	rcall	.+2210   	; 0x1172 <__gesf2>
     8d0:	88 23       	and	r24, r24
     8d2:	0c f0       	brlt	.+2      	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
     8d4:	48 c0       	rjmp	.+144    	; 0x966 <__LOCK_REGION_LENGTH__+0x566>
     8d6:	04 5f       	subi	r16, 0xF4	; 244
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	a7 96       	adiw	r28, 0x27	; 39
     8dc:	2e ad       	ldd	r18, Y+62	; 0x3e
     8de:	3f ad       	ldd	r19, Y+63	; 0x3f
     8e0:	a7 97       	sbiw	r28, 0x27	; 39
     8e2:	24 5f       	subi	r18, 0xF4	; 244
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	a7 96       	adiw	r28, 0x27	; 39
     8e8:	3f af       	std	Y+63, r19	; 0x3f
     8ea:	2e af       	std	Y+62, r18	; 0x3e
     8ec:	a7 97       	sbiw	r28, 0x27	; 39
	float leg_change[6];
	float p[3];
	float leg_vector[6][3];	
	
	//iterate though the legs
	for (uint8_t leg = 0; leg <= 5; leg++)
     8ee:	3c e0       	ldi	r19, 0x0C	; 12
     8f0:	23 0e       	add	r2, r19
     8f2:	31 1c       	adc	r3, r1
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	00 3e       	cpi	r16, 0xE0	; 224
     8f8:	18 07       	cpc	r17, r24
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
     8fc:	a6 ce       	rjmp	.-692    	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	cf 55       	subi	r28, 0x5F	; 95
     904:	df 4f       	sbci	r29, 0xFF	; 255
     906:	c8 80       	ld	r12, Y
	
	
	//calculate number of steps do this after all legs have been successfully evaluated
	for (uint8_t leg = 0; leg <= 5; leg++)
	{
		last_steps[leg] = leg_steps[leg]; //update previous steps once we know that it is valid
     908:	d9 80       	ldd	r13, Y+1	; 0x01
     90a:	c1 5a       	subi	r28, 0xA1	; 161
     90c:	d0 40       	sbci	r29, 0x00	; 0
     90e:	c8 01       	movw	r24, r16
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	dc 01       	movw	r26, r24
     916:	ac 59       	subi	r26, 0x9C	; 156
     918:	bb 4f       	sbci	r27, 0xFB	; 251
     91a:	7d 01       	movw	r14, r26
     91c:	2d 91       	ld	r18, X+
     91e:	3c 91       	ld	r19, X
     920:	fc 01       	movw	r30, r24
     922:	e8 5a       	subi	r30, 0xA8	; 168
		
		leg_steps[leg] = int16_t(leg_change[leg] * mm_steps * micro_steps);
     924:	fb 4f       	sbci	r31, 0xFB	; 251
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
     92a:	f6 01       	movw	r30, r12
     92c:	61 91       	ld	r22, Z+
     92e:	71 91       	ld	r23, Z+
     930:	81 91       	ld	r24, Z+
     932:	91 91       	ld	r25, Z+
     934:	6f 01       	movw	r12, r30
     936:	2d eb       	ldi	r18, 0xBD	; 189
     938:	36 ed       	ldi	r19, 0xD6	; 214
     93a:	40 eb       	ldi	r20, 0xB0	; 176
     93c:	52 e4       	ldi	r21, 0x42	; 66
     93e:	1d d4       	rcall	.+2106   	; 0x117a <__mulsf3>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	51 e4       	ldi	r21, 0x41	; 65
     948:	18 d4       	rcall	.+2096   	; 0x117a <__mulsf3>
     94a:	30 d3       	rcall	.+1632   	; 0xfac <__fixsfsi>
     94c:	d7 01       	movw	r26, r14
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	7c 93       	st	X, r23
     952:	6e 93       	st	-X, r22
     954:	0f 5f       	subi	r16, 0xFF	; 255
     956:	1f 4f       	sbci	r17, 0xFF	; 255
		
	}
	
	
	//calculate number of steps do this after all legs have been successfully evaluated
	for (uint8_t leg = 0; leg <= 5; leg++)
     958:	06 30       	cpi	r16, 0x06	; 6
     95a:	11 05       	cpc	r17, r1
     95c:	c1 f6       	brne	.-80     	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
		last_steps[leg] = leg_steps[leg]; //update previous steps once we know that it is valid
		
		leg_steps[leg] = int16_t(leg_change[leg] * mm_steps * micro_steps);
	}
	
	return 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	03 c0       	rjmp	.+6      	; 0x968 <__LOCK_REGION_LENGTH__+0x568>
		leg_change[leg] = sqrtf(leg_vector[leg][X]*leg_vector[leg][X] + leg_vector[leg][Y]*leg_vector[leg][Y] + leg_vector[leg][Z]*leg_vector[leg][Z]) - leg_mid;
		
		//check if out of range (leg length)
		if (leg_change[leg] <= -leg_range || leg_change[leg] >= leg_range)
		{
			return 0;
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	01 c0       	rjmp	.+2      	; 0x968 <__LOCK_REGION_LENGTH__+0x568>
     966:	80 e0       	ldi	r24, 0x00	; 0
		leg_steps[leg] = int16_t(leg_change[leg] * mm_steps * micro_steps);
	}
	
	return 1;
	
}
     968:	ce 55       	subi	r28, 0x5E	; 94
     96a:	df 4f       	sbci	r29, 0xFF	; 255
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	3f 90       	pop	r3
     998:	2f 90       	pop	r2
     99a:	08 95       	ret

0000099c <_Z9en_motorsh>:
}

//enable / disable motors
void en_motors(uint8_t enable)
{
	if (enable == 0)
     99c:	81 11       	cpse	r24, r1
     99e:	0f c0       	rjmp	.+30     	; 0x9be <_Z9en_motorsh+0x22>
	{
		leg0_en_port |= (leg0_en_mask);
     9a0:	eb e0       	ldi	r30, 0x0B	; 11
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	80 81       	ld	r24, Z
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	80 83       	st	Z, r24
		leg1_en_port |= (leg1_en_mask);
     9aa:	89 9a       	sbi	0x11, 1	; 17
		leg2_en_port |= (leg2_en_mask);
     9ac:	e8 e0       	ldi	r30, 0x08	; 8
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	80 81       	ld	r24, Z
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	80 83       	st	Z, r24
		leg3_en_port |= (leg3_en_mask);
     9b6:	12 9a       	sbi	0x02, 2	; 2
		leg4_en_port |= (leg4_en_mask);
     9b8:	15 9a       	sbi	0x02, 5	; 2
		leg5_en_port |= (leg5_en_mask);
     9ba:	a2 9a       	sbi	0x14, 2	; 20
     9bc:	08 95       	ret
	} 
	else
	{
		leg0_en_port &= ~(leg0_en_mask);
     9be:	eb e0       	ldi	r30, 0x0B	; 11
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	80 81       	ld	r24, Z
     9c4:	8d 7f       	andi	r24, 0xFD	; 253
     9c6:	80 83       	st	Z, r24
		leg1_en_port &= ~(leg1_en_mask);
     9c8:	89 98       	cbi	0x11, 1	; 17
		leg2_en_port &= ~(leg2_en_mask);
     9ca:	e8 e0       	ldi	r30, 0x08	; 8
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	80 81       	ld	r24, Z
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	80 83       	st	Z, r24
		leg3_en_port &= ~(leg3_en_mask);
     9d4:	12 98       	cbi	0x02, 2	; 2
		leg4_en_port &= ~(leg4_en_mask);
     9d6:	15 98       	cbi	0x02, 5	; 2
		leg5_en_port &= ~(leg5_en_mask);
     9d8:	a2 98       	cbi	0x14, 2	; 20
     9da:	08 95       	ret

000009dc <_Z10step_motorhh>:
//step specific motor
void step_motor(uint8_t motor, uint8_t dir)
{


	if (motor == 0)
     9dc:	81 11       	cpse	r24, r1
     9de:	0e c0       	rjmp	.+28     	; 0x9fc <_Z10step_motorhh+0x20>
	{
		if (dir == 0)
     9e0:	61 11       	cpse	r22, r1
     9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <_Z10step_motorhh+0x14>
		{	leg0_dir_port |= (leg0_dir_mask);	}
     9e4:	e2 e0       	ldi	r30, 0x02	; 2
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	90 81       	ld	r25, Z
     9ea:	92 60       	ori	r25, 0x02	; 2
     9ec:	90 83       	st	Z, r25
     9ee:	1e c0       	rjmp	.+60     	; 0xa2c <_Z10step_motorhh+0x50>
		else
		{	leg0_dir_port &= ~(leg0_dir_mask);	}
     9f0:	e2 e0       	ldi	r30, 0x02	; 2
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	90 81       	ld	r25, Z
     9f6:	9d 7f       	andi	r25, 0xFD	; 253
     9f8:	90 83       	st	Z, r25
     9fa:	18 c0       	rjmp	.+48     	; 0xa2c <_Z10step_motorhh+0x50>
	}
	
	if (motor == 1)
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	71 f4       	brne	.+28     	; 0xa1c <_Z10step_motorhh+0x40>
	{
		if (dir == 0)
     a00:	61 11       	cpse	r22, r1
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <_Z10step_motorhh+0x34>
		{	leg1_dir_port &= ~(leg1_dir_mask);	}
     a04:	eb e0       	ldi	r30, 0x0B	; 11
     a06:	f1 e0       	ldi	r31, 0x01	; 1
     a08:	90 81       	ld	r25, Z
     a0a:	9b 7f       	andi	r25, 0xFB	; 251
     a0c:	90 83       	st	Z, r25
     a0e:	16 c0       	rjmp	.+44     	; 0xa3c <_Z10step_motorhh+0x60>
		else
		{	leg1_dir_port |= (leg1_dir_mask);	}
     a10:	eb e0       	ldi	r30, 0x0B	; 11
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	90 81       	ld	r25, Z
     a16:	94 60       	ori	r25, 0x04	; 4
     a18:	90 83       	st	Z, r25
     a1a:	10 c0       	rjmp	.+32     	; 0xa3c <_Z10step_motorhh+0x60>
	}
	
	if (motor == 2)
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	31 f4       	brne	.+12     	; 0xa2c <_Z10step_motorhh+0x50>
	{
		if (dir == 0)
     a20:	61 11       	cpse	r22, r1
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <_Z10step_motorhh+0x4c>
		{	leg2_dir_port |= (leg2_dir_mask);	}
     a24:	8a 9a       	sbi	0x11, 2	; 17
     a26:	12 c0       	rjmp	.+36     	; 0xa4c <_Z10step_motorhh+0x70>
		else
		{	leg2_dir_port &= ~(leg2_dir_mask);	}
     a28:	8a 98       	cbi	0x11, 2	; 17
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <_Z10step_motorhh+0x70>
	}
	
	if (motor == 3)
     a2c:	83 30       	cpi	r24, 0x03	; 3
     a2e:	31 f4       	brne	.+12     	; 0xa3c <_Z10step_motorhh+0x60>
	{
		if (dir == 0)
     a30:	61 11       	cpse	r22, r1
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <_Z10step_motorhh+0x5c>
		{	leg3_dir_port &= ~(leg3_dir_mask);	}
     a34:	10 98       	cbi	0x02, 0	; 2
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <_Z10step_motorhh+0x80>
		else
		{	leg3_dir_port |= (leg3_dir_mask);	}
     a38:	10 9a       	sbi	0x02, 0	; 2
     a3a:	10 c0       	rjmp	.+32     	; 0xa5c <_Z10step_motorhh+0x80>
	}
	
	if (motor == 4)
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	31 f4       	brne	.+12     	; 0xa4c <_Z10step_motorhh+0x70>
	{
		if (dir == 0)
     a40:	61 11       	cpse	r22, r1
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <_Z10step_motorhh+0x6c>
		{	leg4_dir_port |= (leg4_dir_mask);	}
     a44:	13 9a       	sbi	0x02, 3	; 2
     a46:	19 c0       	rjmp	.+50     	; 0xa7a <_Z10step_motorhh+0x9e>
		else
		{	leg4_dir_port &= ~(leg4_dir_mask);	}
     a48:	13 98       	cbi	0x02, 3	; 2
     a4a:	17 c0       	rjmp	.+46     	; 0xa7a <_Z10step_motorhh+0x9e>
	}
	
	if (motor == 5)
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	31 f4       	brne	.+12     	; 0xa5c <_Z10step_motorhh+0x80>
	{
		if (dir == 0)
     a50:	61 11       	cpse	r22, r1
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <_Z10step_motorhh+0x7c>
		{	leg5_dir_port &= ~(leg5_dir_mask);	}
     a54:	16 98       	cbi	0x02, 6	; 2
     a56:	1a c0       	rjmp	.+52     	; 0xa8c <_Z10step_motorhh+0xb0>
		else
		{	leg5_dir_port |= (leg5_dir_mask);	}
     a58:	16 9a       	sbi	0x02, 6	; 2
     a5a:	18 c0       	rjmp	.+48     	; 0xa8c <_Z10step_motorhh+0xb0>
	else
	{	}
	
uint8_t delay = step_delay_us * (32/micro_steps);
// rising edge causes driver index to move one step
	if (motor == 0)
     a5c:	81 11       	cpse	r24, r1
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <_Z10step_motorhh+0x9e>
	{
		leg0_step_port |= (leg0_step_mask);
     a60:	e2 e0       	ldi	r30, 0x02	; 2
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	90 81       	ld	r25, Z
     a66:	91 60       	ori	r25, 0x01	; 1
     a68:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6a:	95 e5       	ldi	r25, 0x55	; 85
     a6c:	9a 95       	dec	r25
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <_Z10step_motorhh+0x90>
     a70:	00 00       	nop
		_delay_us(delay);
		leg0_step_port &= ~(leg0_step_mask);
     a72:	90 81       	ld	r25, Z
     a74:	9e 7f       	andi	r25, 0xFE	; 254
     a76:	90 83       	st	Z, r25
     a78:	12 c0       	rjmp	.+36     	; 0xa9e <_Z10step_motorhh+0xc2>
	}
	if (motor == 1)
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <_Z10step_motorhh+0xb0>
	{
		leg1_step_port |= (leg1_step_mask);
     a7e:	88 9a       	sbi	0x11, 0	; 17
     a80:	95 e5       	ldi	r25, 0x55	; 85
     a82:	9a 95       	dec	r25
     a84:	f1 f7       	brne	.-4      	; 0xa82 <_Z10step_motorhh+0xa6>
     a86:	00 00       	nop
		_delay_us(delay);
		leg1_step_port &= ~(leg1_step_mask);
     a88:	88 98       	cbi	0x11, 0	; 17
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <_Z10step_motorhh+0xd4>
	}
	if (motor == 2)
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	39 f4       	brne	.+14     	; 0xa9e <_Z10step_motorhh+0xc2>
	{
		leg2_step_port |= (leg2_step_mask);
     a90:	8b 9a       	sbi	0x11, 3	; 17
     a92:	95 e5       	ldi	r25, 0x55	; 85
     a94:	9a 95       	dec	r25
     a96:	f1 f7       	brne	.-4      	; 0xa94 <_Z10step_motorhh+0xb8>
     a98:	00 00       	nop
		_delay_us(delay);
		leg2_step_port &= ~(leg2_step_mask);
     a9a:	8b 98       	cbi	0x11, 3	; 17
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <_Z10step_motorhh+0xe6>
	}
	if (motor == 3)
     a9e:	83 30       	cpi	r24, 0x03	; 3
     aa0:	39 f4       	brne	.+14     	; 0xab0 <_Z10step_motorhh+0xd4>
	{
		leg3_step_port |= (leg3_step_mask);
     aa2:	11 9a       	sbi	0x02, 1	; 2
     aa4:	85 e5       	ldi	r24, 0x55	; 85
     aa6:	8a 95       	dec	r24
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <_Z10step_motorhh+0xca>
     aaa:	00 00       	nop
		_delay_us(delay);
		leg3_step_port &= ~(leg3_step_mask);
     aac:	11 98       	cbi	0x02, 1	; 2
     aae:	08 95       	ret
	}
	if (motor == 4)
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	39 f4       	brne	.+14     	; 0xac2 <_Z10step_motorhh+0xe6>
	{
		leg4_step_port |= (leg4_step_mask);
     ab4:	14 9a       	sbi	0x02, 4	; 2
     ab6:	95 e5       	ldi	r25, 0x55	; 85
     ab8:	9a 95       	dec	r25
     aba:	f1 f7       	brne	.-4      	; 0xab8 <_Z10step_motorhh+0xdc>
     abc:	00 00       	nop
		_delay_us(delay);
		leg4_step_port &= ~(leg4_step_mask);
     abe:	14 98       	cbi	0x02, 4	; 2
     ac0:	08 95       	ret
	}
	if (motor == 5)
     ac2:	85 30       	cpi	r24, 0x05	; 5
     ac4:	31 f4       	brne	.+12     	; 0xad2 <_Z10step_motorhh+0xf6>
	{
		leg5_step_port |= (leg5_step_mask);
     ac6:	17 9a       	sbi	0x02, 7	; 2
     ac8:	85 e5       	ldi	r24, 0x55	; 85
     aca:	8a 95       	dec	r24
     acc:	f1 f7       	brne	.-4      	; 0xaca <_Z10step_motorhh+0xee>
     ace:	00 00       	nop
		_delay_us(delay);
		leg5_step_port &= ~(leg5_step_mask);
     ad0:	17 98       	cbi	0x02, 7	; 2
     ad2:	08 95       	ret

00000ad4 <_Z9move_legsv>:
}


//move legs based on steps required
void move_legs()
{
     ad4:	5f 92       	push	r5
     ad6:	6f 92       	push	r6
     ad8:	7f 92       	push	r7
     ada:	8f 92       	push	r8
     adc:	9f 92       	push	r9
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	68 97       	sbiw	r28, 0x18	; 24
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
	if (new_offset != curr_offset)
	{
		uint8_t leg = 0;
		
		//calculate the new position
		calc_legs();	
     b00:	cd bf       	out	0x3d, r28	; 61
		int16_t temp_steps[6];
		
		
		
		//attempt to even out the effects of rounding errors
		temp_steps[0] = (leg_steps[0] - last_steps[0] +1);
     b02:	9e db       	rcall	.-2244   	; 0x240 <_Z9calc_legsv>
     b04:	a4 e6       	ldi	r26, 0x64	; 100
     b06:	b4 e0       	ldi	r27, 0x04	; 4
     b08:	8d 91       	ld	r24, X+
     b0a:	9c 91       	ld	r25, X
     b0c:	11 97       	sbiw	r26, 0x01	; 1
     b0e:	e8 e5       	ldi	r30, 0x58	; 88
     b10:	f4 e0       	ldi	r31, 0x04	; 4
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	82 1b       	sub	r24, r18
     b18:	93 0b       	sbc	r25, r19
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	9e 87       	std	Y+14, r25	; 0x0e
		temp_steps[1] = (leg_steps[1] - last_steps[1] -1);
     b1e:	8d 87       	std	Y+13, r24	; 0x0d
     b20:	12 96       	adiw	r26, 0x02	; 2
     b22:	8d 91       	ld	r24, X+
     b24:	9c 91       	ld	r25, X
     b26:	13 97       	sbiw	r26, 0x03	; 3
     b28:	22 81       	ldd	r18, Z+2	; 0x02
     b2a:	33 81       	ldd	r19, Z+3	; 0x03
     b2c:	82 1b       	sub	r24, r18
     b2e:	93 0b       	sbc	r25, r19
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	98 8b       	std	Y+16, r25	; 0x10
		temp_steps[2] = (leg_steps[2] - last_steps[2] +1);
     b34:	8f 87       	std	Y+15, r24	; 0x0f
     b36:	14 96       	adiw	r26, 0x04	; 4
     b38:	8d 91       	ld	r24, X+
     b3a:	9c 91       	ld	r25, X
     b3c:	15 97       	sbiw	r26, 0x05	; 5
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	82 1b       	sub	r24, r18
     b44:	93 0b       	sbc	r25, r19
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	9a 8b       	std	Y+18, r25	; 0x12
		temp_steps[3] = (leg_steps[3] - last_steps[3] -1);
     b4a:	89 8b       	std	Y+17, r24	; 0x11
     b4c:	16 96       	adiw	r26, 0x06	; 6
     b4e:	8d 91       	ld	r24, X+
     b50:	9c 91       	ld	r25, X
     b52:	17 97       	sbiw	r26, 0x07	; 7
     b54:	26 81       	ldd	r18, Z+6	; 0x06
     b56:	37 81       	ldd	r19, Z+7	; 0x07
     b58:	82 1b       	sub	r24, r18
     b5a:	93 0b       	sbc	r25, r19
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	9c 8b       	std	Y+20, r25	; 0x14
		temp_steps[4] = (leg_steps[4] - last_steps[4] +1);
     b60:	8b 8b       	std	Y+19, r24	; 0x13
     b62:	18 96       	adiw	r26, 0x08	; 8
     b64:	8d 91       	ld	r24, X+
     b66:	9c 91       	ld	r25, X
     b68:	19 97       	sbiw	r26, 0x09	; 9
     b6a:	20 85       	ldd	r18, Z+8	; 0x08
     b6c:	31 85       	ldd	r19, Z+9	; 0x09
     b6e:	82 1b       	sub	r24, r18
     b70:	93 0b       	sbc	r25, r19
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	9e 8b       	std	Y+22, r25	; 0x16
		temp_steps[5] = (leg_steps[5] - last_steps[5] -1);
     b76:	8d 8b       	std	Y+21, r24	; 0x15
     b78:	1a 96       	adiw	r26, 0x0a	; 10
     b7a:	8d 91       	ld	r24, X+
     b7c:	9c 91       	ld	r25, X
     b7e:	1b 97       	sbiw	r26, 0x0b	; 11
     b80:	22 85       	ldd	r18, Z+10	; 0x0a
     b82:	33 85       	ldd	r19, Z+11	; 0x0b
     b84:	82 1b       	sub	r24, r18
     b86:	93 0b       	sbc	r25, r19
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	98 8f       	std	Y+24, r25	; 0x18
     b8c:	8f 8b       	std	Y+23, r24	; 0x17
     b8e:	de 01       	movw	r26, r28
     b90:	1d 96       	adiw	r26, 0x0d	; 13
     b92:	fe 01       	movw	r30, r28
     b94:	31 96       	adiw	r30, 0x01	; 1
     b96:	20 e0       	ldi	r18, 0x00	; 0
		
		
		//calculate absolute value for further calculations
		uint16_t uleg_steps[6];
		uint8_t leg_dirs = 0;
		uint16_t max_steps = 0;
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	81 2c       	mov	r8, r1
		temp_steps[5] = (leg_steps[5] - last_steps[5] -1);
		
		
		//calculate absolute value for further calculations
		uint16_t uleg_steps[6];
		uint8_t leg_dirs = 0;
     b9c:	91 2c       	mov	r9, r1
		{
			uleg_steps[leg] = abs(temp_steps[leg]); //absolute value - unsigned
			
			if (temp_steps[leg] >= 0)
			{
				leg_dirs |= (1<<leg); //is positive so set bit
     b9e:	51 2c       	mov	r5, r1
     ba0:	ee 24       	eor	r14, r14
     ba2:	e3 94       	inc	r14
     ba4:	f1 2c       	mov	r15, r1
		//calculate intervals to step intermediate legs
		
		
		
		//iterate and step motors to move to new position
		for (uint16_t i = max_steps; i > 0; i--)
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <_Z9move_legsv+0xe4>
     ba8:	81 14       	cp	r8, r1
     baa:	91 04       	cpc	r9, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <_Z9move_legsv+0xdc>
		{
			for (leg = 0; leg <= 5; leg++)
			{
				if (uleg_steps[leg] != 0)
				{
					step_motor(leg, uint8_t(leg_dirs & (1<<leg)));
     bae:	60 c0       	rjmp	.+192    	; 0xc70 <_Z9move_legsv+0x19c>
     bb0:	66 24       	eor	r6, r6
     bb2:	63 94       	inc	r6
     bb4:	71 2c       	mov	r7, r1
		
		
		
		for (leg = 0; leg <= 5; leg++)
		{
			uleg_steps[leg] = abs(temp_steps[leg]); //absolute value - unsigned
     bb6:	20 c0       	rjmp	.+64     	; 0xbf8 <_Z9move_legsv+0x124>
     bb8:	12 2f       	mov	r17, r18
     bba:	8d 91       	ld	r24, X+
     bbc:	9d 91       	ld	r25, X+
     bbe:	ac 01       	movw	r20, r24
     bc0:	99 23       	and	r25, r25
     bc2:	24 f4       	brge	.+8      	; 0xbcc <_Z9move_legsv+0xf8>
     bc4:	44 27       	eor	r20, r20
     bc6:	55 27       	eor	r21, r21
     bc8:	48 1b       	sub	r20, r24
     bca:	59 0b       	sbc	r21, r25
     bcc:	ba 01       	movw	r22, r20
     bce:	41 93       	st	Z+, r20
			
			if (temp_steps[leg] >= 0)
     bd0:	51 93       	st	Z+, r21
     bd2:	99 23       	and	r25, r25
			{
				leg_dirs |= (1<<leg); //is positive so set bit
     bd4:	3c f0       	brlt	.+14     	; 0xbe4 <_Z9move_legsv+0x110>
     bd6:	c7 01       	movw	r24, r14
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <_Z9move_legsv+0x10a>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	1a 95       	dec	r17
     be0:	e2 f7       	brpl	.-8      	; 0xbda <_Z9move_legsv+0x106>
     be2:	58 2a       	or	r5, r24
     be4:	86 16       	cp	r8, r22
     be6:	97 06       	cpc	r9, r23
     be8:	08 f4       	brcc	.+2      	; 0xbec <_Z9move_legsv+0x118>
     bea:	4b 01       	movw	r8, r22
     bec:	2f 5f       	subi	r18, 0xFF	; 255
		uint8_t leg_dirs = 0;
		uint16_t max_steps = 0;
		
		
		
		for (leg = 0; leg <= 5; leg++)
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	26 30       	cpi	r18, 0x06	; 6
     bf2:	31 05       	cpc	r19, r1
     bf4:	09 f7       	brne	.-62     	; 0xbb8 <_Z9move_legsv+0xe4>
		temp_steps[5] = (leg_steps[5] - last_steps[5] -1);
		
		
		//calculate absolute value for further calculations
		uint16_t uleg_steps[6];
		uint8_t leg_dirs = 0;
     bf6:	d8 cf       	rjmp	.-80     	; 0xba8 <_Z9move_legsv+0xd4>
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	6c 01       	movw	r12, r24
     bfe:	e1 2c       	mov	r14, r1
		//iterate and step motors to move to new position
		for (uint16_t i = max_steps; i > 0; i--)
		{
			for (leg = 0; leg <= 5; leg++)
			{
				if (uleg_steps[leg] != 0)
     c00:	f1 2c       	mov	r15, r1
     c02:	87 01       	movw	r16, r14
     c04:	f6 01       	movw	r30, r12
     c06:	a0 80       	ld	r10, Z
     c08:	b1 80       	ldd	r11, Z+1	; 0x01
     c0a:	a1 14       	cp	r10, r1
     c0c:	b1 04       	cpc	r11, r1
				{
					step_motor(leg, uint8_t(leg_dirs & (1<<leg)));
     c0e:	81 f0       	breq	.+32     	; 0xc30 <_Z9move_legsv+0x15c>
     c10:	b3 01       	movw	r22, r6
     c12:	0e 2c       	mov	r0, r14
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <_Z9move_legsv+0x146>
     c16:	66 0f       	add	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <_Z9move_legsv+0x142>
     c1e:	65 21       	and	r22, r5
     c20:	8e 2d       	mov	r24, r14
					uleg_steps[leg]--;
     c22:	dc de       	rcall	.-584    	; 0x9dc <_Z10step_motorhh>
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	af 1a       	sub	r10, r31
     c28:	b1 08       	sbc	r11, r1
     c2a:	f6 01       	movw	r30, r12
     c2c:	b1 82       	std	Z+1, r11	; 0x01
				}
				
				curr_offset[leg] = new_offset[leg];
     c2e:	a0 82       	st	Z, r10
     c30:	00 0f       	add	r16, r16
     c32:	11 1f       	adc	r17, r17
     c34:	00 0f       	add	r16, r16
     c36:	11 1f       	adc	r17, r17
     c38:	f8 01       	movw	r30, r16
     c3a:	e0 5c       	subi	r30, 0xC0	; 192
     c3c:	fb 4f       	sbci	r31, 0xFB	; 251
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	a2 81       	ldd	r26, Z+2	; 0x02
     c44:	b3 81       	ldd	r27, Z+3	; 0x03
     c46:	f8 01       	movw	r30, r16
     c48:	e8 5d       	subi	r30, 0xD8	; 216
     c4a:	fb 4f       	sbci	r31, 0xFB	; 251
     c4c:	80 83       	st	Z, r24
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	a2 83       	std	Z+2, r26	; 0x02
     c52:	b3 83       	std	Z+3, r27	; 0x03
     c54:	ff ef       	ldi	r31, 0xFF	; 255
     c56:	ef 1a       	sub	r14, r31
     c58:	ff 0a       	sbc	r15, r31
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	c8 0e       	add	r12, r24
		
		
		//iterate and step motors to move to new position
		for (uint16_t i = max_steps; i > 0; i--)
		{
			for (leg = 0; leg <= 5; leg++)
     c5e:	d1 1c       	adc	r13, r1
     c60:	96 e0       	ldi	r25, 0x06	; 6
     c62:	e9 16       	cp	r14, r25
     c64:	f1 04       	cpc	r15, r1
		//calculate intervals to step intermediate legs
		
		
		
		//iterate and step motors to move to new position
		for (uint16_t i = max_steps; i > 0; i--)
     c66:	69 f6       	brne	.-102    	; 0xc02 <_Z9move_legsv+0x12e>
     c68:	e1 e0       	ldi	r30, 0x01	; 1
     c6a:	8e 1a       	sub	r8, r30
     c6c:	91 08       	sbc	r9, r1
		}
		
	}
	
	
}
     c6e:	21 f6       	brne	.-120    	; 0xbf8 <_Z9move_legsv+0x124>
     c70:	68 96       	adiw	r28, 0x18	; 24
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	7f 90       	pop	r7
     c96:	6f 90       	pop	r6
     c98:	5f 90       	pop	r5
     c9a:	08 95       	ret

00000c9c <_Z9zero_legsv>:
		
}

//zero legs
void zero_legs()
{
     c9c:	cf 93       	push	r28
	read_switches(); 
     c9e:	df 93       	push	r29
	
	while (end_stops < 0b00111111) //as the end stops are a binary value, 1 = set, stop when last leg set
     ca0:	42 da       	rcall	.-2940   	; 0x126 <_Z13read_switchesv>
     ca2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
	{
		read_switches(); //make sure that its not already in the stop position before moving motors
     ca6:	8f 33       	cpi	r24, 0x3F	; 63
     ca8:	e0 f4       	brcc	.+56     	; 0xce2 <_Z9zero_legsv+0x46>
     caa:	3d da       	rcall	.-2950   	; 0x126 <_Z13read_switchesv>
     cac:	c0 e0       	ldi	r28, 0x00	; 0
		
		//use end_stops as a mask for stepping motors
		//run one round of stepping and then re-check stops
		for (uint8_t leg = 0; leg <= 5; leg++)
		{
			if ((end_stops & (1<<leg)) == 0)
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <end_stops>
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0c 2e       	mov	r0, r28
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <_Z9zero_legsv+0x22>
     cba:	95 95       	asr	r25
     cbc:	87 95       	ror	r24
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <_Z9zero_legsv+0x1e>
			{
				step_motor(leg, 0);
     cc2:	80 fd       	sbrc	r24, 0
     cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <_Z9zero_legsv+0x3c>
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	8c 2f       	mov	r24, r28
     cca:	88 de       	rcall	.-752    	; 0x9dc <_Z10step_motorhh>
     ccc:	87 ec       	ldi	r24, 0xC7	; 199
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <_Z9zero_legsv+0x34>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <_Z9zero_legsv+0x3a>
	{
		read_switches(); //make sure that its not already in the stop position before moving motors
		
		//use end_stops as a mask for stepping motors
		//run one round of stepping and then re-check stops
		for (uint8_t leg = 0; leg <= 5; leg++)
     cd6:	00 00       	nop
     cd8:	21 96       	adiw	r28, 0x01	; 1
     cda:	c6 30       	cpi	r28, 0x06	; 6
     cdc:	d1 05       	cpc	r29, r1
     cde:	41 f7       	brne	.-48     	; 0xcb0 <_Z9zero_legsv+0x14>
	}
	
	//move to mid position
	for (uint16_t i = 0; i <= (leg_range/2)*mm_steps*micro_steps; i++)
	{
		step_motor(0, 1);
     ce0:	e0 cf       	rjmp	.-64     	; 0xca2 <_Z9zero_legsv+0x6>
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
		step_motor(1, 1);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	80 e0       	ldi	r24, 0x00	; 0
		step_motor(2, 1);
     cea:	78 de       	rcall	.-784    	; 0x9dc <_Z10step_motorhh>
     cec:	61 e0       	ldi	r22, 0x01	; 1
		step_motor(3, 1);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	75 de       	rcall	.-790    	; 0x9dc <_Z10step_motorhh>
     cf2:	61 e0       	ldi	r22, 0x01	; 1
		step_motor(4, 1);
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	72 de       	rcall	.-796    	; 0x9dc <_Z10step_motorhh>
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	83 e0       	ldi	r24, 0x03	; 3
		step_motor(5, 1);
     cfc:	6f de       	rcall	.-802    	; 0x9dc <_Z10step_motorhh>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	6c de       	rcall	.-808    	; 0x9dc <_Z10step_motorhh>
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	69 de       	rcall	.-814    	; 0x9dc <_Z10step_motorhh>
     d0a:	87 ec       	ldi	r24, 0xC7	; 199
		}
		
	}
	
	//move to mid position
	for (uint16_t i = 0; i <= (leg_range/2)*mm_steps*micro_steps; i++)
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_Z9zero_legsv+0x72>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <_Z9zero_legsv+0x78>
     d14:	00 00       	nop
     d16:	21 96       	adiw	r28, 0x01	; 1
     d18:	be 01       	movw	r22, r28
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	77 d1       	rcall	.+750    	; 0x100e <__floatunsisf>
     d20:	2d eb       	ldi	r18, 0xBD	; 189
     d22:	36 ed       	ldi	r19, 0xD6	; 214
     d24:	40 eb       	ldi	r20, 0xB0	; 176
	
	
	//zero leg steps
	for (uint8_t leg = 0; leg <= 5; leg++)
	{
		last_steps[leg] = 0;
     d26:	54 e4       	ldi	r21, 0x44	; 68
     d28:	3d d1       	rcall	.+634    	; 0xfa4 <__cmpsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	e4 f6       	brge	.-72     	; 0xce6 <_Z9zero_legsv+0x4a>
     d2e:	e8 e5       	ldi	r30, 0x58	; 88
     d30:	f4 e0       	ldi	r31, 0x04	; 4
     d32:	11 82       	std	Z+1, r1	; 0x01
     d34:	10 82       	st	Z, r1
     d36:	13 82       	std	Z+3, r1	; 0x03
     d38:	12 82       	std	Z+2, r1	; 0x02
     d3a:	15 82       	std	Z+5, r1	; 0x05
     d3c:	14 82       	std	Z+4, r1	; 0x04
     d3e:	17 82       	std	Z+7, r1	; 0x07
     d40:	16 82       	std	Z+6, r1	; 0x06
	}
	
}
     d42:	11 86       	std	Z+9, r1	; 0x09
     d44:	10 86       	std	Z+8, r1	; 0x08
     d46:	13 86       	std	Z+11, r1	; 0x0b
     d48:	12 86       	std	Z+10, r1	; 0x0a
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <main>:

int main(void)
{
   //set output bits
   //leg0
   leg0_en_dir |= leg0_en_mask;
     d50:	ea e0       	ldi	r30, 0x0A	; 10
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	80 83       	st	Z, r24
   leg0_step_dir |= leg0_step_mask;
     d5a:	a1 e0       	ldi	r26, 0x01	; 1
     d5c:	b1 e0       	ldi	r27, 0x01	; 1
     d5e:	8c 91       	ld	r24, X
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	8c 93       	st	X, r24
   leg0_en_dir |= leg0_en_mask;
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 83       	st	Z, r24
   //leg1
   leg1_en_dir |= leg1_en_mask;
     d6a:	81 9a       	sbi	0x10, 1	; 16
   leg1_step_dir |= leg1_step_mask;
     d6c:	80 9a       	sbi	0x10, 0	; 16
   leg1_en_dir |= leg1_en_mask;
     d6e:	81 9a       	sbi	0x10, 1	; 16
   //leg2
   leg2_en_dir |= leg2_en_mask;
     d70:	e7 e0       	ldi	r30, 0x07	; 7
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	80 83       	st	Z, r24
   leg2_step_dir |= leg2_step_mask;
     d7a:	83 9a       	sbi	0x10, 3	; 16
   leg2_en_dir |= leg2_en_mask;
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 83       	st	Z, r24
   //leg3
   leg3_en_dir |= leg3_en_mask;
     d82:	0a 9a       	sbi	0x01, 2	; 1
   leg3_step_dir |= leg3_step_mask;
     d84:	09 9a       	sbi	0x01, 1	; 1
   leg3_en_dir |= leg3_en_mask;
     d86:	0a 9a       	sbi	0x01, 2	; 1
   //leg4
   leg4_en_dir |= leg4_en_mask;
     d88:	0d 9a       	sbi	0x01, 5	; 1
   leg4_step_dir |= leg4_step_mask;
     d8a:	0c 9a       	sbi	0x01, 4	; 1
   leg4_en_dir |= leg4_en_mask;
     d8c:	0d 9a       	sbi	0x01, 5	; 1
   //leg5
   leg5_en_dir |= leg5_en_mask;
     d8e:	9a 9a       	sbi	0x13, 2	; 19
   leg5_step_dir |= leg5_step_mask;
     d90:	0f 9a       	sbi	0x01, 7	; 1
   leg5_en_dir |= leg5_en_mask;
     d92:	9a 9a       	sbi	0x13, 2	; 19
	
	//set pull up on pinouts
	leg0_stop_port |= leg0_stop_mask;
     d94:	43 9a       	sbi	0x08, 3	; 8
	leg1_stop_port |= leg1_stop_mask;
     d96:	42 9a       	sbi	0x08, 2	; 8
	leg2_stop_port |= leg2_stop_mask;
     d98:	41 9a       	sbi	0x08, 1	; 8
	leg3_stop_port |= leg3_stop_mask;
     d9a:	40 9a       	sbi	0x08, 0	; 8
	leg4_stop_port |= leg4_stop_mask;
     d9c:	45 9a       	sbi	0x08, 5	; 8
	leg5_stop_port |= leg5_stop_mask;
     d9e:	44 9a       	sbi	0x08, 4	; 8
   
   en_motors(1);
     da0:	81 e0       	ldi	r24, 0x01	; 1
   
   
   //zero arms
   zero_legs();
     da2:	fc dd       	rcall	.-1032   	; 0x99c <_Z9en_motorsh>
     da4:	7b df       	rcall	.-266    	; 0xc9c <_Z9zero_legsv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da6:	2f ef       	ldi	r18, 0xFF	; 255
     da8:	89 e6       	ldi	r24, 0x69	; 105
     daa:	98 e1       	ldi	r25, 0x18	; 24
     dac:	21 50       	subi	r18, 0x01	; 1
     dae:	80 40       	sbci	r24, 0x00	; 0
     db0:	90 40       	sbci	r25, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <main+0x5c>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <main+0x66>
     db6:	00 00       	nop
    {
		
		for (uint8_t leg = 0; leg <= 2; leg++)
		{
		_delay_ms(500);
		new_offset[leg] = 0.5;
     db8:	0f 2e       	mov	r0, r31
     dba:	41 2c       	mov	r4, r1
     dbc:	51 2c       	mov	r5, r1
     dbe:	61 2c       	mov	r6, r1
     dc0:	ff e3       	ldi	r31, 0x3F	; 63
     dc2:	7f 2e       	mov	r7, r31
     dc4:	f0 2d       	mov	r31, r0
		move_legs();
		_delay_ms(500);
		new_offset[leg] = -0.5;
     dc6:	0f 2e       	mov	r0, r31
     dc8:	81 2c       	mov	r8, r1
     dca:	91 2c       	mov	r9, r1
     dcc:	a1 2c       	mov	r10, r1
     dce:	ff eb       	ldi	r31, 0xBF	; 191
     dd0:	bf 2e       	mov	r11, r31
     dd2:	f0 2d       	mov	r31, r0
		}
		
		for (uint8_t leg = 3; leg <= 5; leg++)
		{
			_delay_ms(500);
			new_offset[leg] = 3;
     dd4:	c1 2c       	mov	r12, r1
     dd6:	d1 2c       	mov	r13, r1
     dd8:	68 94       	set
     dda:	ee 24       	eor	r14, r14
     ddc:	e6 f8       	bld	r14, 6
     dde:	fe 2c       	mov	r15, r14
volatile float curr_offset[6] = {0,0,0,0,0,0};



int main(void)
{
     de0:	00 e0       	ldi	r16, 0x00	; 0
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	af ef       	ldi	r26, 0xFF	; 255
     de6:	b9 e6       	ldi	r27, 0x69	; 105
     de8:	28 e1       	ldi	r18, 0x18	; 24
     dea:	a1 50       	subi	r26, 0x01	; 1
     dec:	b0 40       	sbci	r27, 0x00	; 0
     dee:	20 40       	sbci	r18, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <main+0x9a>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <main+0xa4>
     df4:	00 00       	nop
    {
		
		for (uint8_t leg = 0; leg <= 2; leg++)
		{
		_delay_ms(500);
		new_offset[leg] = 0.5;
     df6:	e8 01       	movw	r28, r16
     df8:	cc 0f       	add	r28, r28
     dfa:	dd 1f       	adc	r29, r29
     dfc:	cc 0f       	add	r28, r28
     dfe:	dd 1f       	adc	r29, r29
     e00:	c0 5c       	subi	r28, 0xC0	; 192
     e02:	db 4f       	sbci	r29, 0xFB	; 251
     e04:	48 82       	st	Y, r4
     e06:	59 82       	std	Y+1, r5	; 0x01
     e08:	6a 82       	std	Y+2, r6	; 0x02
		move_legs();
     e0a:	7b 82       	std	Y+3, r7	; 0x03
     e0c:	63 de       	rcall	.-826    	; 0xad4 <_Z9move_legsv>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	99 e6       	ldi	r25, 0x69	; 105
     e12:	a8 e1       	ldi	r26, 0x18	; 24
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	90 40       	sbci	r25, 0x00	; 0
     e18:	a0 40       	sbci	r26, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0xc4>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <main+0xce>
     e1e:	00 00       	nop
		_delay_ms(500);
		new_offset[leg] = -0.5;
     e20:	88 82       	st	Y, r8
     e22:	99 82       	std	Y+1, r9	; 0x01
     e24:	aa 82       	std	Y+2, r10	; 0x02
		move_legs();
     e26:	bb 82       	std	Y+3, r11	; 0x03
     e28:	55 de       	rcall	.-854    	; 0xad4 <_Z9move_legsv>
     e2a:	bf ef       	ldi	r27, 0xFF	; 255
     e2c:	29 e6       	ldi	r18, 0x69	; 105
     e2e:	88 e1       	ldi	r24, 0x18	; 24
     e30:	b1 50       	subi	r27, 0x01	; 1
     e32:	20 40       	sbci	r18, 0x00	; 0
     e34:	80 40       	sbci	r24, 0x00	; 0
     e36:	e1 f7       	brne	.-8      	; 0xe30 <main+0xe0>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <main+0xea>
		_delay_ms(500);
		new_offset[leg] = 0;
     e3a:	00 00       	nop
     e3c:	18 82       	st	Y, r1
     e3e:	19 82       	std	Y+1, r1	; 0x01
		move_legs();
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	1b 82       	std	Y+3, r1	; 0x03
     e44:	47 de       	rcall	.-882    	; 0xad4 <_Z9move_legsv>
     e46:	0f 5f       	subi	r16, 0xFF	; 255
   _delay_ms(500);
   
    while (1) 
    {
		
		for (uint8_t leg = 0; leg <= 2; leg++)
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
     e4a:	03 30       	cpi	r16, 0x03	; 3
     e4c:	11 05       	cpc	r17, r1
     e4e:	51 f6       	brne	.-108    	; 0xde4 <main+0x94>
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	a9 e6       	ldi	r26, 0x69	; 105
     e54:	b8 e1       	ldi	r27, 0x18	; 24
     e56:	91 50       	subi	r25, 0x01	; 1
     e58:	a0 40       	sbci	r26, 0x00	; 0
     e5a:	b0 40       	sbci	r27, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <main+0x106>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <main+0x110>
		}
		
		for (uint8_t leg = 3; leg <= 5; leg++)
		{
			_delay_ms(500);
			new_offset[leg] = 3;
     e60:	00 00       	nop
     e62:	e8 01       	movw	r28, r16
     e64:	cc 0f       	add	r28, r28
     e66:	dd 1f       	adc	r29, r29
     e68:	cc 0f       	add	r28, r28
     e6a:	dd 1f       	adc	r29, r29
     e6c:	c0 5c       	subi	r28, 0xC0	; 192
     e6e:	db 4f       	sbci	r29, 0xFB	; 251
     e70:	c8 82       	st	Y, r12
     e72:	d9 82       	std	Y+1, r13	; 0x01
			move_legs();
     e74:	ea 82       	std	Y+2, r14	; 0x02
     e76:	fb 82       	std	Y+3, r15	; 0x03
     e78:	2d de       	rcall	.-934    	; 0xad4 <_Z9move_legsv>
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	89 e6       	ldi	r24, 0x69	; 105
     e7e:	98 e1       	ldi	r25, 0x18	; 24
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <main+0x130>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <main+0x13a>
			_delay_ms(500);
			new_offset[leg] = -3;
     e8a:	00 00       	nop
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e4       	ldi	r26, 0x40	; 64
     e92:	b0 ec       	ldi	r27, 0xC0	; 192
     e94:	88 83       	st	Y, r24
     e96:	99 83       	std	Y+1, r25	; 0x01
			move_legs();
     e98:	aa 83       	std	Y+2, r26	; 0x02
     e9a:	bb 83       	std	Y+3, r27	; 0x03
     e9c:	1b de       	rcall	.-970    	; 0xad4 <_Z9move_legsv>
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	a9 e6       	ldi	r26, 0x69	; 105
     ea2:	b8 e1       	ldi	r27, 0x18	; 24
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	a0 40       	sbci	r26, 0x00	; 0
     ea8:	b0 40       	sbci	r27, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0x154>
			_delay_ms(500);
			new_offset[leg] = 0;
     eac:	00 c0       	rjmp	.+0      	; 0xeae <main+0x15e>
     eae:	00 00       	nop
     eb0:	18 82       	st	Y, r1
     eb2:	19 82       	std	Y+1, r1	; 0x01
			move_legs();
     eb4:	1a 82       	std	Y+2, r1	; 0x02
     eb6:	1b 82       	std	Y+3, r1	; 0x03
     eb8:	0d de       	rcall	.-998    	; 0xad4 <_Z9move_legsv>
     eba:	0f 5f       	subi	r16, 0xFF	; 255
		_delay_ms(500);
		new_offset[leg] = 0;
		move_legs();
		}
		
		for (uint8_t leg = 3; leg <= 5; leg++)
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	06 30       	cpi	r16, 0x06	; 6
     ec0:	11 05       	cpc	r17, r1
     ec2:	31 f6       	brne	.-116    	; 0xe50 <main+0x100>
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	89 e6       	ldi	r24, 0x69	; 105
     ec8:	98 e1       	ldi	r25, 0x18	; 24
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <main+0x17a>
			new_offset[leg] = 0;
			move_legs();
		}
		
		_delay_ms(500);
		zero_legs();
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x184>
     ed4:	00 00       	nop
   
   //zero arms
   zero_legs();
   _delay_ms(500);
   
    while (1) 
     ed6:	e2 de       	rcall	.-572    	; 0xc9c <_Z9zero_legsv>
     ed8:	83 cf       	rjmp	.-250    	; 0xde0 <main+0x90>

00000eda <__subsf3>:
     eda:	50 58       	subi	r21, 0x80	; 128

00000edc <__addsf3>:
     edc:	bb 27       	eor	r27, r27
     ede:	aa 27       	eor	r26, r26
     ee0:	0e d0       	rcall	.+28     	; 0xefe <__addsf3x>
     ee2:	0d c1       	rjmp	.+538    	; 0x10fe <__fp_round>
     ee4:	fe d0       	rcall	.+508    	; 0x10e2 <__fp_pscA>
     ee6:	30 f0       	brcs	.+12     	; 0xef4 <__addsf3+0x18>
     ee8:	03 d1       	rcall	.+518    	; 0x10f0 <__fp_pscB>
     eea:	20 f0       	brcs	.+8      	; 0xef4 <__addsf3+0x18>
     eec:	31 f4       	brne	.+12     	; 0xefa <__addsf3+0x1e>
     eee:	9f 3f       	cpi	r25, 0xFF	; 255
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__addsf3+0x1a>
     ef2:	1e f4       	brtc	.+6      	; 0xefa <__addsf3+0x1e>
     ef4:	f3 c0       	rjmp	.+486    	; 0x10dc <__fp_nan>
     ef6:	0e f4       	brtc	.+2      	; 0xefa <__addsf3+0x1e>
     ef8:	e0 95       	com	r30
     efa:	e7 fb       	bst	r30, 7
     efc:	e9 c0       	rjmp	.+466    	; 0x10d0 <__fp_inf>

00000efe <__addsf3x>:
     efe:	e9 2f       	mov	r30, r25
     f00:	0f d1       	rcall	.+542    	; 0x1120 <__fp_split3>
     f02:	80 f3       	brcs	.-32     	; 0xee4 <__addsf3+0x8>
     f04:	ba 17       	cp	r27, r26
     f06:	62 07       	cpc	r22, r18
     f08:	73 07       	cpc	r23, r19
     f0a:	84 07       	cpc	r24, r20
     f0c:	95 07       	cpc	r25, r21
     f0e:	18 f0       	brcs	.+6      	; 0xf16 <__addsf3x+0x18>
     f10:	71 f4       	brne	.+28     	; 0xf2e <__addsf3x+0x30>
     f12:	9e f5       	brtc	.+102    	; 0xf7a <__addsf3x+0x7c>
     f14:	27 c1       	rjmp	.+590    	; 0x1164 <__fp_zero>
     f16:	0e f4       	brtc	.+2      	; 0xf1a <__addsf3x+0x1c>
     f18:	e0 95       	com	r30
     f1a:	0b 2e       	mov	r0, r27
     f1c:	ba 2f       	mov	r27, r26
     f1e:	a0 2d       	mov	r26, r0
     f20:	0b 01       	movw	r0, r22
     f22:	b9 01       	movw	r22, r18
     f24:	90 01       	movw	r18, r0
     f26:	0c 01       	movw	r0, r24
     f28:	ca 01       	movw	r24, r20
     f2a:	a0 01       	movw	r20, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	ff 27       	eor	r31, r31
     f30:	59 1b       	sub	r21, r25
     f32:	99 f0       	breq	.+38     	; 0xf5a <__addsf3x+0x5c>
     f34:	59 3f       	cpi	r21, 0xF9	; 249
     f36:	50 f4       	brcc	.+20     	; 0xf4c <__addsf3x+0x4e>
     f38:	50 3e       	cpi	r21, 0xE0	; 224
     f3a:	68 f1       	brcs	.+90     	; 0xf96 <__addsf3x+0x98>
     f3c:	1a 16       	cp	r1, r26
     f3e:	f0 40       	sbci	r31, 0x00	; 0
     f40:	a2 2f       	mov	r26, r18
     f42:	23 2f       	mov	r18, r19
     f44:	34 2f       	mov	r19, r20
     f46:	44 27       	eor	r20, r20
     f48:	58 5f       	subi	r21, 0xF8	; 248
     f4a:	f3 cf       	rjmp	.-26     	; 0xf32 <__addsf3x+0x34>
     f4c:	46 95       	lsr	r20
     f4e:	37 95       	ror	r19
     f50:	27 95       	ror	r18
     f52:	a7 95       	ror	r26
     f54:	f0 40       	sbci	r31, 0x00	; 0
     f56:	53 95       	inc	r21
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__addsf3x+0x4e>
     f5a:	7e f4       	brtc	.+30     	; 0xf7a <__addsf3x+0x7c>
     f5c:	1f 16       	cp	r1, r31
     f5e:	ba 0b       	sbc	r27, r26
     f60:	62 0b       	sbc	r22, r18
     f62:	73 0b       	sbc	r23, r19
     f64:	84 0b       	sbc	r24, r20
     f66:	ba f0       	brmi	.+46     	; 0xf96 <__addsf3x+0x98>
     f68:	91 50       	subi	r25, 0x01	; 1
     f6a:	a1 f0       	breq	.+40     	; 0xf94 <__addsf3x+0x96>
     f6c:	ff 0f       	add	r31, r31
     f6e:	bb 1f       	adc	r27, r27
     f70:	66 1f       	adc	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	c2 f7       	brpl	.-16     	; 0xf68 <__addsf3x+0x6a>
     f78:	0e c0       	rjmp	.+28     	; 0xf96 <__addsf3x+0x98>
     f7a:	ba 0f       	add	r27, r26
     f7c:	62 1f       	adc	r22, r18
     f7e:	73 1f       	adc	r23, r19
     f80:	84 1f       	adc	r24, r20
     f82:	48 f4       	brcc	.+18     	; 0xf96 <__addsf3x+0x98>
     f84:	87 95       	ror	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	b7 95       	ror	r27
     f8c:	f7 95       	ror	r31
     f8e:	9e 3f       	cpi	r25, 0xFE	; 254
     f90:	08 f0       	brcs	.+2      	; 0xf94 <__addsf3x+0x96>
     f92:	b3 cf       	rjmp	.-154    	; 0xefa <__addsf3+0x1e>
     f94:	93 95       	inc	r25
     f96:	88 0f       	add	r24, r24
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__addsf3x+0x9e>
     f9a:	99 27       	eor	r25, r25
     f9c:	ee 0f       	add	r30, r30
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret

00000fa4 <__cmpsf2>:
     fa4:	71 d0       	rcall	.+226    	; 0x1088 <__fp_cmp>
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <__cmpsf2+0x6>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	08 95       	ret

00000fac <__fixsfsi>:
     fac:	04 d0       	rcall	.+8      	; 0xfb6 <__fixunssfsi>
     fae:	68 94       	set
     fb0:	b1 11       	cpse	r27, r1
     fb2:	d9 c0       	rjmp	.+434    	; 0x1166 <__fp_szero>
     fb4:	08 95       	ret

00000fb6 <__fixunssfsi>:
     fb6:	bc d0       	rcall	.+376    	; 0x1130 <__fp_splitA>
     fb8:	88 f0       	brcs	.+34     	; 0xfdc <__fixunssfsi+0x26>
     fba:	9f 57       	subi	r25, 0x7F	; 127
     fbc:	90 f0       	brcs	.+36     	; 0xfe2 <__fixunssfsi+0x2c>
     fbe:	b9 2f       	mov	r27, r25
     fc0:	99 27       	eor	r25, r25
     fc2:	b7 51       	subi	r27, 0x17	; 23
     fc4:	a0 f0       	brcs	.+40     	; 0xfee <__fixunssfsi+0x38>
     fc6:	d1 f0       	breq	.+52     	; 0xffc <__fixunssfsi+0x46>
     fc8:	66 0f       	add	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	1a f0       	brmi	.+6      	; 0xfd8 <__fixunssfsi+0x22>
     fd2:	ba 95       	dec	r27
     fd4:	c9 f7       	brne	.-14     	; 0xfc8 <__fixunssfsi+0x12>
     fd6:	12 c0       	rjmp	.+36     	; 0xffc <__fixunssfsi+0x46>
     fd8:	b1 30       	cpi	r27, 0x01	; 1
     fda:	81 f0       	breq	.+32     	; 0xffc <__fixunssfsi+0x46>
     fdc:	c3 d0       	rcall	.+390    	; 0x1164 <__fp_zero>
     fde:	b1 e0       	ldi	r27, 0x01	; 1
     fe0:	08 95       	ret
     fe2:	c0 c0       	rjmp	.+384    	; 0x1164 <__fp_zero>
     fe4:	67 2f       	mov	r22, r23
     fe6:	78 2f       	mov	r23, r24
     fe8:	88 27       	eor	r24, r24
     fea:	b8 5f       	subi	r27, 0xF8	; 248
     fec:	39 f0       	breq	.+14     	; 0xffc <__fixunssfsi+0x46>
     fee:	b9 3f       	cpi	r27, 0xF9	; 249
     ff0:	cc f3       	brlt	.-14     	; 0xfe4 <__fixunssfsi+0x2e>
     ff2:	86 95       	lsr	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	b3 95       	inc	r27
     ffa:	d9 f7       	brne	.-10     	; 0xff2 <__fixunssfsi+0x3c>
     ffc:	3e f4       	brtc	.+14     	; 0x100c <__fixunssfsi+0x56>
     ffe:	90 95       	com	r25
    1000:	80 95       	com	r24
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__floatunsisf>:
    100e:	e8 94       	clt
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <__floatsisf+0x12>

00001012 <__floatsisf>:
    1012:	97 fb       	bst	r25, 7
    1014:	3e f4       	brtc	.+14     	; 0x1024 <__floatsisf+0x12>
    1016:	90 95       	com	r25
    1018:	80 95       	com	r24
    101a:	70 95       	com	r23
    101c:	61 95       	neg	r22
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	8f 4f       	sbci	r24, 0xFF	; 255
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	99 23       	and	r25, r25
    1026:	a9 f0       	breq	.+42     	; 0x1052 <__floatsisf+0x40>
    1028:	f9 2f       	mov	r31, r25
    102a:	96 e9       	ldi	r25, 0x96	; 150
    102c:	bb 27       	eor	r27, r27
    102e:	93 95       	inc	r25
    1030:	f6 95       	lsr	r31
    1032:	87 95       	ror	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b7 95       	ror	r27
    103a:	f1 11       	cpse	r31, r1
    103c:	f8 cf       	rjmp	.-16     	; 0x102e <__floatsisf+0x1c>
    103e:	fa f4       	brpl	.+62     	; 0x107e <__floatsisf+0x6c>
    1040:	bb 0f       	add	r27, r27
    1042:	11 f4       	brne	.+4      	; 0x1048 <__floatsisf+0x36>
    1044:	60 ff       	sbrs	r22, 0
    1046:	1b c0       	rjmp	.+54     	; 0x107e <__floatsisf+0x6c>
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	16 c0       	rjmp	.+44     	; 0x107e <__floatsisf+0x6c>
    1052:	88 23       	and	r24, r24
    1054:	11 f0       	breq	.+4      	; 0x105a <__floatsisf+0x48>
    1056:	96 e9       	ldi	r25, 0x96	; 150
    1058:	11 c0       	rjmp	.+34     	; 0x107c <__floatsisf+0x6a>
    105a:	77 23       	and	r23, r23
    105c:	21 f0       	breq	.+8      	; 0x1066 <__floatsisf+0x54>
    105e:	9e e8       	ldi	r25, 0x8E	; 142
    1060:	87 2f       	mov	r24, r23
    1062:	76 2f       	mov	r23, r22
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <__floatsisf+0x5e>
    1066:	66 23       	and	r22, r22
    1068:	71 f0       	breq	.+28     	; 0x1086 <__floatsisf+0x74>
    106a:	96 e8       	ldi	r25, 0x86	; 134
    106c:	86 2f       	mov	r24, r22
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	2a f0       	brmi	.+10     	; 0x107e <__floatsisf+0x6c>
    1074:	9a 95       	dec	r25
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	da f7       	brpl	.-10     	; 0x1074 <__floatsisf+0x62>
    107e:	88 0f       	add	r24, r24
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	97 f9       	bld	r25, 7
    1086:	08 95       	ret

00001088 <__fp_cmp>:
    1088:	99 0f       	add	r25, r25
    108a:	00 08       	sbc	r0, r0
    108c:	55 0f       	add	r21, r21
    108e:	aa 0b       	sbc	r26, r26
    1090:	e0 e8       	ldi	r30, 0x80	; 128
    1092:	fe ef       	ldi	r31, 0xFE	; 254
    1094:	16 16       	cp	r1, r22
    1096:	17 06       	cpc	r1, r23
    1098:	e8 07       	cpc	r30, r24
    109a:	f9 07       	cpc	r31, r25
    109c:	c0 f0       	brcs	.+48     	; 0x10ce <__fp_cmp+0x46>
    109e:	12 16       	cp	r1, r18
    10a0:	13 06       	cpc	r1, r19
    10a2:	e4 07       	cpc	r30, r20
    10a4:	f5 07       	cpc	r31, r21
    10a6:	98 f0       	brcs	.+38     	; 0x10ce <__fp_cmp+0x46>
    10a8:	62 1b       	sub	r22, r18
    10aa:	73 0b       	sbc	r23, r19
    10ac:	84 0b       	sbc	r24, r20
    10ae:	95 0b       	sbc	r25, r21
    10b0:	39 f4       	brne	.+14     	; 0x10c0 <__fp_cmp+0x38>
    10b2:	0a 26       	eor	r0, r26
    10b4:	61 f0       	breq	.+24     	; 0x10ce <__fp_cmp+0x46>
    10b6:	23 2b       	or	r18, r19
    10b8:	24 2b       	or	r18, r20
    10ba:	25 2b       	or	r18, r21
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <__fp_cmp+0x3e>
    10be:	08 95       	ret
    10c0:	0a 26       	eor	r0, r26
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <__fp_cmp+0x3e>
    10c4:	a1 40       	sbci	r26, 0x01	; 1
    10c6:	a6 95       	lsr	r26
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	81 1d       	adc	r24, r1
    10cc:	81 1d       	adc	r24, r1
    10ce:	08 95       	ret

000010d0 <__fp_inf>:
    10d0:	97 f9       	bld	r25, 7
    10d2:	9f 67       	ori	r25, 0x7F	; 127
    10d4:	80 e8       	ldi	r24, 0x80	; 128
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	08 95       	ret

000010dc <__fp_nan>:
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	80 ec       	ldi	r24, 0xC0	; 192
    10e0:	08 95       	ret

000010e2 <__fp_pscA>:
    10e2:	00 24       	eor	r0, r0
    10e4:	0a 94       	dec	r0
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	18 06       	cpc	r1, r24
    10ec:	09 06       	cpc	r0, r25
    10ee:	08 95       	ret

000010f0 <__fp_pscB>:
    10f0:	00 24       	eor	r0, r0
    10f2:	0a 94       	dec	r0
    10f4:	12 16       	cp	r1, r18
    10f6:	13 06       	cpc	r1, r19
    10f8:	14 06       	cpc	r1, r20
    10fa:	05 06       	cpc	r0, r21
    10fc:	08 95       	ret

000010fe <__fp_round>:
    10fe:	09 2e       	mov	r0, r25
    1100:	03 94       	inc	r0
    1102:	00 0c       	add	r0, r0
    1104:	11 f4       	brne	.+4      	; 0x110a <__fp_round+0xc>
    1106:	88 23       	and	r24, r24
    1108:	52 f0       	brmi	.+20     	; 0x111e <__fp_round+0x20>
    110a:	bb 0f       	add	r27, r27
    110c:	40 f4       	brcc	.+16     	; 0x111e <__fp_round+0x20>
    110e:	bf 2b       	or	r27, r31
    1110:	11 f4       	brne	.+4      	; 0x1116 <__fp_round+0x18>
    1112:	60 ff       	sbrs	r22, 0
    1114:	04 c0       	rjmp	.+8      	; 0x111e <__fp_round+0x20>
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	08 95       	ret

00001120 <__fp_split3>:
    1120:	57 fd       	sbrc	r21, 7
    1122:	90 58       	subi	r25, 0x80	; 128
    1124:	44 0f       	add	r20, r20
    1126:	55 1f       	adc	r21, r21
    1128:	59 f0       	breq	.+22     	; 0x1140 <__fp_splitA+0x10>
    112a:	5f 3f       	cpi	r21, 0xFF	; 255
    112c:	71 f0       	breq	.+28     	; 0x114a <__fp_splitA+0x1a>
    112e:	47 95       	ror	r20

00001130 <__fp_splitA>:
    1130:	88 0f       	add	r24, r24
    1132:	97 fb       	bst	r25, 7
    1134:	99 1f       	adc	r25, r25
    1136:	61 f0       	breq	.+24     	; 0x1150 <__fp_splitA+0x20>
    1138:	9f 3f       	cpi	r25, 0xFF	; 255
    113a:	79 f0       	breq	.+30     	; 0x115a <__fp_splitA+0x2a>
    113c:	87 95       	ror	r24
    113e:	08 95       	ret
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	14 06       	cpc	r1, r20
    1146:	55 1f       	adc	r21, r21
    1148:	f2 cf       	rjmp	.-28     	; 0x112e <__fp_split3+0xe>
    114a:	46 95       	lsr	r20
    114c:	f1 df       	rcall	.-30     	; 0x1130 <__fp_splitA>
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <__fp_splitA+0x30>
    1150:	16 16       	cp	r1, r22
    1152:	17 06       	cpc	r1, r23
    1154:	18 06       	cpc	r1, r24
    1156:	99 1f       	adc	r25, r25
    1158:	f1 cf       	rjmp	.-30     	; 0x113c <__fp_splitA+0xc>
    115a:	86 95       	lsr	r24
    115c:	71 05       	cpc	r23, r1
    115e:	61 05       	cpc	r22, r1
    1160:	08 94       	sec
    1162:	08 95       	ret

00001164 <__fp_zero>:
    1164:	e8 94       	clt

00001166 <__fp_szero>:
    1166:	bb 27       	eor	r27, r27
    1168:	66 27       	eor	r22, r22
    116a:	77 27       	eor	r23, r23
    116c:	cb 01       	movw	r24, r22
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret

00001172 <__gesf2>:
    1172:	8a df       	rcall	.-236    	; 0x1088 <__fp_cmp>
    1174:	08 f4       	brcc	.+2      	; 0x1178 <__gesf2+0x6>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	08 95       	ret

0000117a <__mulsf3>:
    117a:	0b d0       	rcall	.+22     	; 0x1192 <__mulsf3x>
    117c:	c0 cf       	rjmp	.-128    	; 0x10fe <__fp_round>
    117e:	b1 df       	rcall	.-158    	; 0x10e2 <__fp_pscA>
    1180:	28 f0       	brcs	.+10     	; 0x118c <__mulsf3+0x12>
    1182:	b6 df       	rcall	.-148    	; 0x10f0 <__fp_pscB>
    1184:	18 f0       	brcs	.+6      	; 0x118c <__mulsf3+0x12>
    1186:	95 23       	and	r25, r21
    1188:	09 f0       	breq	.+2      	; 0x118c <__mulsf3+0x12>
    118a:	a2 cf       	rjmp	.-188    	; 0x10d0 <__fp_inf>
    118c:	a7 cf       	rjmp	.-178    	; 0x10dc <__fp_nan>
    118e:	11 24       	eor	r1, r1
    1190:	ea cf       	rjmp	.-44     	; 0x1166 <__fp_szero>

00001192 <__mulsf3x>:
    1192:	c6 df       	rcall	.-116    	; 0x1120 <__fp_split3>
    1194:	a0 f3       	brcs	.-24     	; 0x117e <__mulsf3+0x4>

00001196 <__mulsf3_pse>:
    1196:	95 9f       	mul	r25, r21
    1198:	d1 f3       	breq	.-12     	; 0x118e <__mulsf3+0x14>
    119a:	95 0f       	add	r25, r21
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	55 1f       	adc	r21, r21
    11a0:	62 9f       	mul	r22, r18
    11a2:	f0 01       	movw	r30, r0
    11a4:	72 9f       	mul	r23, r18
    11a6:	bb 27       	eor	r27, r27
    11a8:	f0 0d       	add	r31, r0
    11aa:	b1 1d       	adc	r27, r1
    11ac:	63 9f       	mul	r22, r19
    11ae:	aa 27       	eor	r26, r26
    11b0:	f0 0d       	add	r31, r0
    11b2:	b1 1d       	adc	r27, r1
    11b4:	aa 1f       	adc	r26, r26
    11b6:	64 9f       	mul	r22, r20
    11b8:	66 27       	eor	r22, r22
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	66 1f       	adc	r22, r22
    11c0:	82 9f       	mul	r24, r18
    11c2:	22 27       	eor	r18, r18
    11c4:	b0 0d       	add	r27, r0
    11c6:	a1 1d       	adc	r26, r1
    11c8:	62 1f       	adc	r22, r18
    11ca:	73 9f       	mul	r23, r19
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	62 1f       	adc	r22, r18
    11d2:	83 9f       	mul	r24, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	22 1f       	adc	r18, r18
    11da:	74 9f       	mul	r23, r20
    11dc:	33 27       	eor	r19, r19
    11de:	a0 0d       	add	r26, r0
    11e0:	61 1d       	adc	r22, r1
    11e2:	23 1f       	adc	r18, r19
    11e4:	84 9f       	mul	r24, r20
    11e6:	60 0d       	add	r22, r0
    11e8:	21 1d       	adc	r18, r1
    11ea:	82 2f       	mov	r24, r18
    11ec:	76 2f       	mov	r23, r22
    11ee:	6a 2f       	mov	r22, r26
    11f0:	11 24       	eor	r1, r1
    11f2:	9f 57       	subi	r25, 0x7F	; 127
    11f4:	50 40       	sbci	r21, 0x00	; 0
    11f6:	8a f0       	brmi	.+34     	; 0x121a <__mulsf3_pse+0x84>
    11f8:	e1 f0       	breq	.+56     	; 0x1232 <__mulsf3_pse+0x9c>
    11fa:	88 23       	and	r24, r24
    11fc:	4a f0       	brmi	.+18     	; 0x1210 <__mulsf3_pse+0x7a>
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	bb 1f       	adc	r27, r27
    1204:	66 1f       	adc	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	91 50       	subi	r25, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	a9 f7       	brne	.-22     	; 0x11fa <__mulsf3_pse+0x64>
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	51 05       	cpc	r21, r1
    1214:	70 f0       	brcs	.+28     	; 0x1232 <__mulsf3_pse+0x9c>
    1216:	5c cf       	rjmp	.-328    	; 0x10d0 <__fp_inf>
    1218:	a6 cf       	rjmp	.-180    	; 0x1166 <__fp_szero>
    121a:	5f 3f       	cpi	r21, 0xFF	; 255
    121c:	ec f3       	brlt	.-6      	; 0x1218 <__mulsf3_pse+0x82>
    121e:	98 3e       	cpi	r25, 0xE8	; 232
    1220:	dc f3       	brlt	.-10     	; 0x1218 <__mulsf3_pse+0x82>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f7 95       	ror	r31
    122c:	e7 95       	ror	r30
    122e:	9f 5f       	subi	r25, 0xFF	; 255
    1230:	c1 f7       	brne	.-16     	; 0x1222 <__mulsf3_pse+0x8c>
    1232:	fe 2b       	or	r31, r30
    1234:	88 0f       	add	r24, r24
    1236:	91 1d       	adc	r25, r1
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret
    1240:	11 f4       	brne	.+4      	; 0x1246 <__mulsf3_pse+0xb0>
    1242:	0e f4       	brtc	.+2      	; 0x1246 <__mulsf3_pse+0xb0>
    1244:	4b cf       	rjmp	.-362    	; 0x10dc <__fp_nan>
    1246:	3e c0       	rjmp	.+124    	; 0x12c4 <__fp_mpack>

00001248 <sqrt>:
    1248:	73 df       	rcall	.-282    	; 0x1130 <__fp_splitA>
    124a:	d0 f3       	brcs	.-12     	; 0x1240 <__mulsf3_pse+0xaa>
    124c:	99 23       	and	r25, r25
    124e:	d9 f3       	breq	.-10     	; 0x1246 <__mulsf3_pse+0xb0>
    1250:	ce f3       	brts	.-14     	; 0x1244 <__mulsf3_pse+0xae>
    1252:	9f 57       	subi	r25, 0x7F	; 127
    1254:	55 0b       	sbc	r21, r21
    1256:	87 ff       	sbrs	r24, 7
    1258:	43 d0       	rcall	.+134    	; 0x12e0 <__fp_norm2>
    125a:	00 24       	eor	r0, r0
    125c:	a0 e6       	ldi	r26, 0x60	; 96
    125e:	40 ea       	ldi	r20, 0xA0	; 160
    1260:	90 01       	movw	r18, r0
    1262:	80 58       	subi	r24, 0x80	; 128
    1264:	56 95       	lsr	r21
    1266:	97 95       	ror	r25
    1268:	28 f4       	brcc	.+10     	; 0x1274 <sqrt+0x2c>
    126a:	80 5c       	subi	r24, 0xC0	; 192
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	20 f0       	brcs	.+8      	; 0x127c <sqrt+0x34>
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	48 07       	cpc	r20, r24
    127a:	30 f4       	brcc	.+12     	; 0x1288 <sqrt+0x40>
    127c:	62 1b       	sub	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	20 29       	or	r18, r0
    1284:	31 29       	or	r19, r1
    1286:	4a 2b       	or	r20, r26
    1288:	a6 95       	lsr	r26
    128a:	17 94       	ror	r1
    128c:	07 94       	ror	r0
    128e:	20 25       	eor	r18, r0
    1290:	31 25       	eor	r19, r1
    1292:	4a 27       	eor	r20, r26
    1294:	58 f7       	brcc	.-42     	; 0x126c <sqrt+0x24>
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <sqrt+0x5e>
    129e:	26 17       	cp	r18, r22
    12a0:	37 07       	cpc	r19, r23
    12a2:	48 07       	cpc	r20, r24
    12a4:	30 f4       	brcc	.+12     	; 0x12b2 <sqrt+0x6a>
    12a6:	62 0b       	sbc	r22, r18
    12a8:	73 0b       	sbc	r23, r19
    12aa:	84 0b       	sbc	r24, r20
    12ac:	20 0d       	add	r18, r0
    12ae:	31 1d       	adc	r19, r1
    12b0:	41 1d       	adc	r20, r1
    12b2:	a0 95       	com	r26
    12b4:	81 f7       	brne	.-32     	; 0x1296 <sqrt+0x4e>
    12b6:	b9 01       	movw	r22, r18
    12b8:	84 2f       	mov	r24, r20
    12ba:	91 58       	subi	r25, 0x81	; 129
    12bc:	88 0f       	add	r24, r24
    12be:	96 95       	lsr	r25
    12c0:	87 95       	ror	r24
    12c2:	08 95       	ret

000012c4 <__fp_mpack>:
    12c4:	9f 3f       	cpi	r25, 0xFF	; 255
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <__fp_mpack_finite+0xc>

000012c8 <__fp_mpack_finite>:
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	20 f4       	brcc	.+8      	; 0x12d4 <__fp_mpack_finite+0xc>
    12cc:	87 95       	ror	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	b7 95       	ror	r27
    12d4:	88 0f       	add	r24, r24
    12d6:	91 1d       	adc	r25, r1
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	97 f9       	bld	r25, 7
    12de:	08 95       	ret

000012e0 <__fp_norm2>:
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	d2 f7       	brpl	.-12     	; 0x12e0 <__fp_norm2>
    12ec:	08 95       	ret

000012ee <_exit>:
    12ee:	f8 94       	cli

000012f0 <__stop_program>:
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <__stop_program>
